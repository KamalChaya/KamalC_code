
wunder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000b4  00800100  00000318  0000038c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000318  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000001c8  00000000  00000000  00000440  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000002b9  00000000  00000000  00000608  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000f46  00000000  00000000  000008c1  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000005b5  00000000  00000000  00001807  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   0000144e  00000000  00000000  00001dbc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000002f0  00000000  00000000  0000320c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000045d  00000000  00000000  000034fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000bbc  00000000  00000000  00003959  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001c8  00000000  00000000  00004515  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 000000f2  00000000  00000000  000046dd  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 e1       	ldi	r30, 0x18	; 24
  ac:	f3 e0       	ldi	r31, 0x03	; 3
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 3b       	cpi	r26, 0xB4	; 180
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a4 eb       	ldi	r26, 0xB4	; 180
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a4 3b       	cpi	r26, 0xB4	; 180
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	40 d0       	rcall	.+128    	; 0x150 <main>
  d0:	21 c1       	rjmp	.+578    	; 0x314 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initialize>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))


void initialize()
{
	CPU_PRESCALE(0);
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	10 82       	st	Z, r1
	
	USART_Init(BAUD_RATE);
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	84 d0       	rcall	.+264    	; 0x1ec <USART_Init>
	USART_Transmit('\f');	// Send form feed to clear the terminal.
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	8d d0       	rcall	.+282    	; 0x202 <USART_Transmit>
	USART_SendString("WunderBoard initializing...\r\n");
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	91 d0       	rcall	.+290    	; 0x210 <USART_SendString>
	
	USART_SendString("\tSetting ADC prescaler and disabling free running mode...\r\n");
  ee:	8e e1       	ldi	r24, 0x1E	; 30
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	8e d0       	rcall	.+284    	; 0x210 <USART_SendString>
	SetupADC(ADC_PRESCALER_32, FALSE);
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	eb d0       	rcall	.+470    	; 0x2d0 <SetupADC>
	
	USART_SendString("\tEnabling ADC...\r\n");
  fa:	8a e5       	ldi	r24, 0x5A	; 90
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	88 d0       	rcall	.+272    	; 0x210 <USART_SendString>
	ADCEnable();
 100:	bf d0       	rcall	.+382    	; 0x280 <ADCEnable>
	
	USART_SendString("\tSetting ADC reference to Vcc...\r\n");
 102:	8d e6       	ldi	r24, 0x6D	; 109
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	84 d0       	rcall	.+264    	; 0x210 <USART_SendString>
	ADCSetReference(ADC_REF_VCC);
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	d2 d0       	rcall	.+420    	; 0x2b0 <ADCSetReference>
	
	// Configure IO //
	USART_SendString("\tConfiguring IO...\r\n");
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	7f d0       	rcall	.+254    	; 0x210 <USART_SendString>
	//DDRx corresponds to PORTx/PINx, dependng on direction of data flow -- PORT for output, PIN for input
	DDRA = 0x00;	// Buttons and switches
 112:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 114:	87 ee       	ldi	r24, 0xE7	; 231
 116:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// LED Column
 11c:	87 e4       	ldi	r24, 0x47	; 71
 11e:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 120:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 122:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	85 b9       	out	0x05, r24	; 5
	PORTE = 0x00;
 128:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 12a:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 12c:	80 e4       	ldi	r24, 0x40	; 64
 12e:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 132:	8b e0       	ldi	r24, 0x0B	; 11
 134:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 138:	88 e1       	ldi	r24, 0x18	; 24
 13a:	90 e0       	ldi	r25, 0x00	; 0
 13c:	90 93 89 00 	sts	0x0089, r25
 140:	80 93 88 00 	sts	0x0088, r24

	USART_SendString("\tSetting SPI\r\n");
 144:	85 ea       	ldi	r24, 0xA5	; 165
 146:	91 e0       	ldi	r25, 0x01	; 1
 148:	63 d0       	rcall	.+198    	; 0x210 <USART_SendString>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 14a:	81 e5       	ldi	r24, 0x51	; 81
 14c:	8c bd       	out	0x2c, r24	; 44

}
 14e:	08 95       	ret

00000150 <main>:


int main(int argc, char **argv)
{
 150:	0f 93       	push	r16
 152:	1f 93       	push	r17
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
	DSTATUS status;
	uint8_t buffer[512];
	unsigned char recv;
	
	initialize();
 158:	bd df       	rcall	.-134    	; 0xd4 <initialize>

	clearArray();
 15a:	c8 d0       	rcall	.+400    	; 0x2ec <clearArray>
 15c:	80 ed       	ldi	r24, 0xD0	; 208
 15e:	97 e0       	ldi	r25, 0x07	; 7
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 160:	28 ec       	ldi	r18, 0xC8	; 200
 162:	30 e0       	ldi	r19, 0x00	; 0
 164:	f9 01       	movw	r30, r18
 166:	31 97       	sbiw	r30, 0x01	; 1
 168:	f1 f7       	brne	.-4      	; 0x166 <main+0x16>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 16a:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 16c:	d9 f7       	brne	.-10     	; 0x164 <main+0x14>
 16e:	80 ed       	ldi	r24, 0xD0	; 208
 170:	97 e0       	ldi	r25, 0x07	; 7
 172:	28 ec       	ldi	r18, 0xC8	; 200
 174:	30 e0       	ldi	r19, 0x00	; 0
 176:	f9 01       	movw	r30, r18
 178:	31 97       	sbiw	r30, 0x01	; 1
 17a:	f1 f7       	brne	.-4      	; 0x178 <main+0x28>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 17c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 17e:	d9 f7       	brne	.-10     	; 0x176 <main+0x26>
 180:	80 ed       	ldi	r24, 0xD0	; 208
 182:	97 e0       	ldi	r25, 0x07	; 7
 184:	28 ec       	ldi	r18, 0xC8	; 200
 186:	30 e0       	ldi	r19, 0x00	; 0
 188:	f9 01       	movw	r30, r18
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	f1 f7       	brne	.-4      	; 0x18a <main+0x3a>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 18e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 190:	d9 f7       	brne	.-10     	; 0x188 <main+0x38>
 192:	80 ed       	ldi	r24, 0xD0	; 208
 194:	97 e0       	ldi	r25, 0x07	; 7
 196:	28 ec       	ldi	r18, 0xC8	; 200
 198:	30 e0       	ldi	r19, 0x00	; 0
 19a:	f9 01       	movw	r30, r18
 19c:	31 97       	sbiw	r30, 0x01	; 1
 19e:	f1 f7       	brne	.-4      	; 0x19c <main+0x4c>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1a0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1a2:	d9 f7       	brne	.-10     	; 0x19a <main+0x4a>
 1a4:	80 ed       	ldi	r24, 0xD0	; 208
 1a6:	97 e0       	ldi	r25, 0x07	; 7
 1a8:	28 ec       	ldi	r18, 0xC8	; 200
 1aa:	30 e0       	ldi	r19, 0x00	; 0
 1ac:	f9 01       	movw	r30, r18
 1ae:	31 97       	sbiw	r30, 0x01	; 1
 1b0:	f1 f7       	brne	.-4      	; 0x1ae <main+0x5e>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1b2:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1b4:	d9 f7       	brne	.-10     	; 0x1ac <main+0x5c>
	_delay_ms(200);
	_delay_ms(200);
	_delay_ms(200);
	_delay_ms(200);
	
	PORTE = 1;
 1b6:	81 e0       	ldi	r24, 0x01	; 1
 1b8:	8e b9       	out	0x0e, r24	; 14
 1ba:	c0 e0       	ldi	r28, 0x00	; 0
 1bc:	d0 e0       	ldi	r29, 0x00	; 0
 1be:	08 ec       	ldi	r16, 0xC8	; 200
 1c0:	10 e0       	ldi	r17, 0x00	; 0
	
	int i = 0;
	while(1){
		
		if(PINA) {
 1c2:	80 b1       	in	r24, 0x00	; 0
 1c4:	88 23       	and	r24, r24
 1c6:	e9 f3       	breq	.-6      	; 0x1c2 <main+0x72>
 1c8:	0a c0       	rjmp	.+20     	; 0x1de <main+0x8e>
			
			while ((i < 255) && (PINA)) {
				set_array_blue(i);
 1ca:	8c 2f       	mov	r24, r28
 1cc:	90 d0       	rcall	.+288    	; 0x2ee <set_array_blue>
 1ce:	80 e1       	ldi	r24, 0x10	; 16
 1d0:	97 e2       	ldi	r25, 0x27	; 39
 1d2:	f8 01       	movw	r30, r16
 1d4:	31 97       	sbiw	r30, 0x01	; 1
 1d6:	f1 f7       	brne	.-4      	; 0x1d4 <main+0x84>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 1d8:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 1da:	d9 f7       	brne	.-10     	; 0x1d2 <main+0x82>
				_delay_ms(1000);
				i++;
 1dc:	21 96       	adiw	r28, 0x01	; 1
	int i = 0;
	while(1){
		
		if(PINA) {
			
			while ((i < 255) && (PINA)) {
 1de:	cf 3f       	cpi	r28, 0xFF	; 255
 1e0:	d1 05       	cpc	r29, r1
 1e2:	7c f7       	brge	.-34     	; 0x1c2 <main+0x72>
 1e4:	80 b1       	in	r24, 0x00	; 0
 1e6:	88 23       	and	r24, r24
 1e8:	81 f7       	brne	.-32     	; 0x1ca <main+0x7a>
 1ea:	eb cf       	rjmp	.-42     	; 0x1c2 <main+0x72>

000001ec <USART_Init>:
 1ec:	90 93 cd 00 	sts	0x00CD, r25
 1f0:	80 93 cc 00 	sts	0x00CC, r24
 1f4:	88 e1       	ldi	r24, 0x18	; 24
 1f6:	80 93 c9 00 	sts	0x00C9, r24
 1fa:	86 e0       	ldi	r24, 0x06	; 6
 1fc:	80 93 ca 00 	sts	0x00CA, r24
 200:	08 95       	ret

00000202 <USART_Transmit>:
 202:	90 91 c8 00 	lds	r25, 0x00C8
 206:	95 ff       	sbrs	r25, 5
 208:	fc cf       	rjmp	.-8      	; 0x202 <USART_Transmit>
 20a:	80 93 ce 00 	sts	0x00CE, r24
 20e:	08 95       	ret

00000210 <USART_SendString>:
 210:	ef 92       	push	r14
 212:	ff 92       	push	r15
 214:	cf 93       	push	r28
 216:	df 93       	push	r29
 218:	e8 2e       	mov	r14, r24
 21a:	e7 01       	movw	r28, r14
 21c:	7e 01       	movw	r14, r28
 21e:	f9 2e       	mov	r15, r25
 220:	e7 01       	movw	r28, r14
 222:	01 c0       	rjmp	.+2      	; 0x226 <USART_SendString+0x16>
 224:	ee df       	rcall	.-36     	; 0x202 <USART_Transmit>
 226:	89 91       	ld	r24, Y+
 228:	88 23       	and	r24, r24
 22a:	e1 f7       	brne	.-8      	; 0x224 <USART_SendString+0x14>
 22c:	df 91       	pop	r29
 22e:	cf 91       	pop	r28
 230:	ff 90       	pop	r15
 232:	ef 90       	pop	r14
 234:	08 95       	ret

00000236 <ADCSetPrescaler>:
 236:	ea e7       	ldi	r30, 0x7A	; 122
 238:	f0 e0       	ldi	r31, 0x00	; 0
 23a:	90 81       	ld	r25, Z
 23c:	98 7f       	andi	r25, 0xF8	; 248
 23e:	90 83       	st	Z, r25
 240:	90 81       	ld	r25, Z
 242:	87 70       	andi	r24, 0x07	; 7
 244:	89 2b       	or	r24, r25
 246:	80 83       	st	Z, r24
 248:	08 95       	ret

0000024a <ADCSetFreeRunning>:
 24a:	88 23       	and	r24, r24
 24c:	99 f0       	breq	.+38     	; 0x274 <ADCSetFreeRunning+0x2a>
 24e:	80 91 7b 00 	lds	r24, 0x007B
 252:	8b 7f       	andi	r24, 0xFB	; 251
 254:	80 93 7b 00 	sts	0x007B, r24
 258:	80 91 7b 00 	lds	r24, 0x007B
 25c:	8d 7f       	andi	r24, 0xFD	; 253
 25e:	80 93 7b 00 	sts	0x007B, r24
 262:	80 91 7b 00 	lds	r24, 0x007B
 266:	8e 7f       	andi	r24, 0xFE	; 254
 268:	80 93 7b 00 	sts	0x007B, r24
 26c:	80 91 7a 00 	lds	r24, 0x007A
 270:	80 62       	ori	r24, 0x20	; 32
 272:	03 c0       	rjmp	.+6      	; 0x27a <ADCSetFreeRunning+0x30>
 274:	80 91 7a 00 	lds	r24, 0x007A
 278:	8f 7d       	andi	r24, 0xDF	; 223
 27a:	80 93 7a 00 	sts	0x007A, r24
 27e:	08 95       	ret

00000280 <ADCEnable>:
 280:	ea e7       	ldi	r30, 0x7A	; 122
 282:	f0 e0       	ldi	r31, 0x00	; 0
 284:	80 81       	ld	r24, Z
 286:	80 68       	ori	r24, 0x80	; 128
 288:	80 83       	st	Z, r24
 28a:	08 95       	ret

0000028c <ADCStart>:
 28c:	ea e7       	ldi	r30, 0x7A	; 122
 28e:	f0 e0       	ldi	r31, 0x00	; 0
 290:	80 81       	ld	r24, Z
 292:	80 64       	ori	r24, 0x40	; 64
 294:	80 83       	st	Z, r24
 296:	08 95       	ret

00000298 <ADCFinish>:
 298:	ea e7       	ldi	r30, 0x7A	; 122
 29a:	f0 e0       	ldi	r31, 0x00	; 0
 29c:	80 81       	ld	r24, Z
 29e:	80 61       	ori	r24, 0x10	; 16
 2a0:	80 83       	st	Z, r24
 2a2:	08 95       	ret

000002a4 <ADCDone>:
 2a4:	90 91 7a 00 	lds	r25, 0x007A
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	94 ff       	sbrs	r25, 4
 2ac:	80 e0       	ldi	r24, 0x00	; 0
 2ae:	08 95       	ret

000002b0 <ADCSetReference>:
 2b0:	90 91 7c 00 	lds	r25, 0x007C
 2b4:	9f 73       	andi	r25, 0x3F	; 63
 2b6:	90 93 7c 00 	sts	0x007C, r25
 2ba:	90 91 7c 00 	lds	r25, 0x007C
 2be:	80 7c       	andi	r24, 0xC0	; 192
 2c0:	89 2b       	or	r24, r25
 2c2:	80 93 7c 00 	sts	0x007C, r24
 2c6:	e2 df       	rcall	.-60     	; 0x28c <ADCStart>
 2c8:	ed df       	rcall	.-38     	; 0x2a4 <ADCDone>
 2ca:	88 23       	and	r24, r24
 2cc:	e9 f3       	breq	.-6      	; 0x2c8 <ADCSetReference+0x18>
 2ce:	e4 cf       	rjmp	.-56     	; 0x298 <ADCFinish>

000002d0 <SetupADC>:
 2d0:	df 93       	push	r29
 2d2:	cf 93       	push	r28
 2d4:	0f 92       	push	r0
 2d6:	cd b7       	in	r28, 0x3d	; 61
 2d8:	de b7       	in	r29, 0x3e	; 62
 2da:	69 83       	std	Y+1, r22	; 0x01
 2dc:	ac df       	rcall	.-168    	; 0x236 <ADCSetPrescaler>
 2de:	69 81       	ldd	r22, Y+1	; 0x01
 2e0:	86 2f       	mov	r24, r22
 2e2:	b3 df       	rcall	.-154    	; 0x24a <ADCSetFreeRunning>
 2e4:	0f 90       	pop	r0
 2e6:	cf 91       	pop	r28
 2e8:	df 91       	pop	r29
 2ea:	08 95       	ret

000002ec <clearArray>:
 2ec:	08 95       	ret

000002ee <set_array_blue>:
 2ee:	1e bc       	out	0x2e, r1	; 46
 2f0:	0d b4       	in	r0, 0x2d	; 45
 2f2:	07 fe       	sbrs	r0, 7
 2f4:	fd cf       	rjmp	.-6      	; 0x2f0 <set_array_blue+0x2>
 2f6:	1e bc       	out	0x2e, r1	; 46
 2f8:	0d b4       	in	r0, 0x2d	; 45
 2fa:	07 fe       	sbrs	r0, 7
 2fc:	fd cf       	rjmp	.-6      	; 0x2f8 <set_array_blue+0xa>
 2fe:	8e bd       	out	0x2e, r24	; 46
 300:	0d b4       	in	r0, 0x2d	; 45
 302:	07 fe       	sbrs	r0, 7
 304:	fd cf       	rjmp	.-6      	; 0x300 <set_array_blue+0x12>
 306:	2f 9a       	sbi	0x05, 7	; 5
 308:	8a ef       	ldi	r24, 0xFA	; 250
 30a:	90 e0       	ldi	r25, 0x00	; 0
 30c:	01 97       	sbiw	r24, 0x01	; 1
 30e:	f1 f7       	brne	.-4      	; 0x30c <set_array_blue+0x1e>
 310:	2f 98       	cbi	0x05, 7	; 5
 312:	08 95       	ret

00000314 <_exit>:
 314:	f8 94       	cli

00000316 <__stop_program>:
 316:	ff cf       	rjmp	.-2      	; 0x316 <__stop_program>
