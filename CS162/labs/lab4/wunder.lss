
wunder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000ee  00800100  0000044c  000004c0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000044c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000210  00000000  00000000  000005ae  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000035b  00000000  00000000  000007be  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000010c3  00000000  00000000  00000b19  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006aa  00000000  00000000  00001bdc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000016d9  00000000  00000000  00002286  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000380  00000000  00000000  00003960  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000051a  00000000  00000000  00003ce0  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d36  00000000  00000000  000041fa  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000228  00000000  00000000  00004f30  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 000000f2  00000000  00000000  00005158  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	TCCR0B = (TCCR0B & ~(0b111)) | clock;
	OCR0A = count;
	
	
	return 0;
}
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	ec e4       	ldi	r30, 0x4C	; 76
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ae 3e       	cpi	r26, 0xEE	; 238
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	ae ee       	ldi	r26, 0xEE	; 238
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ae 3e       	cpi	r26, 0xEE	; 238
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	71 d0       	rcall	.+226    	; 0x1b2 <main>
  d0:	bb c1       	rjmp	.+886    	; 0x448 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <itoa>:
  d4:	fb 01       	movw	r30, r22
  d6:	9f 01       	movw	r18, r30
  d8:	e8 94       	clt
  da:	42 30       	cpi	r20, 0x02	; 2
  dc:	bc f0       	brlt	.+46     	; 0x10c <itoa+0x38>
  de:	45 32       	cpi	r20, 0x25	; 37
  e0:	ac f4       	brge	.+42     	; 0x10c <itoa+0x38>
  e2:	4a 30       	cpi	r20, 0x0A	; 10
  e4:	29 f4       	brne	.+10     	; 0xf0 <itoa+0x1c>
  e6:	97 fb       	bst	r25, 7
  e8:	1e f4       	brtc	.+6      	; 0xf0 <itoa+0x1c>
  ea:	90 95       	com	r25
  ec:	81 95       	neg	r24
  ee:	9f 4f       	sbci	r25, 0xFF	; 255
  f0:	64 2f       	mov	r22, r20
  f2:	77 27       	eor	r23, r23
  f4:	95 d1       	rcall	.+810    	; 0x420 <__udivmodhi4>
  f6:	80 5d       	subi	r24, 0xD0	; 208
  f8:	8a 33       	cpi	r24, 0x3A	; 58
  fa:	0c f0       	brlt	.+2      	; 0xfe <itoa+0x2a>
  fc:	89 5d       	subi	r24, 0xD9	; 217
  fe:	81 93       	st	Z+, r24
 100:	cb 01       	movw	r24, r22
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	a9 f7       	brne	.-22     	; 0xf0 <itoa+0x1c>
 106:	16 f4       	brtc	.+4      	; 0x10c <itoa+0x38>
 108:	5d e2       	ldi	r21, 0x2D	; 45
 10a:	51 93       	st	Z+, r21
 10c:	10 82       	st	Z, r1
 10e:	c9 01       	movw	r24, r18
 110:	00 c0       	rjmp	.+0      	; 0x112 <strrev>

00000112 <strrev>:
 112:	dc 01       	movw	r26, r24
 114:	fc 01       	movw	r30, r24
 116:	67 2f       	mov	r22, r23
 118:	71 91       	ld	r23, Z+
 11a:	77 23       	and	r23, r23
 11c:	e1 f7       	brne	.-8      	; 0x116 <strrev+0x4>
 11e:	32 97       	sbiw	r30, 0x02	; 2
 120:	04 c0       	rjmp	.+8      	; 0x12a <strrev+0x18>
 122:	7c 91       	ld	r23, X
 124:	6d 93       	st	X+, r22
 126:	70 83       	st	Z, r23
 128:	62 91       	ld	r22, -Z
 12a:	ae 17       	cp	r26, r30
 12c:	bf 07       	cpc	r27, r31
 12e:	c8 f3       	brcs	.-14     	; 0x122 <strrev+0x10>
 130:	08 95       	ret

00000132 <initialize>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))


void initialize( void )
{
	CPU_PRESCALE(0);
 132:	e1 e6       	ldi	r30, 0x61	; 97
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	80 83       	st	Z, r24
 13a:	10 82       	st	Z, r1
	
	USART_init(BAUD_RATE);
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	c0 d0       	rcall	.+384    	; 0x2c2 <USART_init>
	USART_transmit('\f');	// Send form feed to clear the terminal.
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	c9 d0       	rcall	.+402    	; 0x2d8 <USART_transmit>
	USART_send_string("WunderBoard initializing...\r\n");
 146:	81 e1       	ldi	r24, 0x11	; 17
 148:	91 e0       	ldi	r25, 0x01	; 1
 14a:	d8 d0       	rcall	.+432    	; 0x2fc <USART_send_string>
	
	USART_send_string("\tSetting ADC prescaler and disabling free running mode...\r\n");
 14c:	8f e2       	ldi	r24, 0x2F	; 47
 14e:	91 e0       	ldi	r25, 0x01	; 1
 150:	d5 d0       	rcall	.+426    	; 0x2fc <USART_send_string>
	setup_ADC(ADC_PRESCALER_32, FALSE);
 152:	85 e0       	ldi	r24, 0x05	; 5
 154:	60 e0       	ldi	r22, 0x00	; 0
 156:	48 d1       	rcall	.+656    	; 0x3e8 <setup_ADC>
	
	USART_send_string("\tEnabling ADC...\r\n");
 158:	8b e6       	ldi	r24, 0x6B	; 107
 15a:	91 e0       	ldi	r25, 0x01	; 1
 15c:	cf d0       	rcall	.+414    	; 0x2fc <USART_send_string>
	ADC_enable();
 15e:	1c d1       	rcall	.+568    	; 0x398 <ADC_enable>
	
	USART_send_string("\tSetting ADC reference to Vcc...\r\n");
 160:	8e e7       	ldi	r24, 0x7E	; 126
 162:	91 e0       	ldi	r25, 0x01	; 1
 164:	cb d0       	rcall	.+406    	; 0x2fc <USART_send_string>
	ADC_set_reference(ADC_REF_VCC);
 166:	80 e4       	ldi	r24, 0x40	; 64
 168:	2f d1       	rcall	.+606    	; 0x3c8 <ADC_set_reference>
	
	// Configure IO //
	USART_send_string("\tConfiguring IO...\r\n");
 16a:	81 ea       	ldi	r24, 0xA1	; 161
 16c:	91 e0       	ldi	r25, 0x01	; 1
 16e:	c6 d0       	rcall	.+396    	; 0x2fc <USART_send_string>
	//DDRx corresponds to PORTx/PINx, dependng on direction of data flow -- PORT for output, PIN for input
	DDRA = 0x00;	// Buttons and switches
 170:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 172:	87 ee       	ldi	r24, 0xE7	; 231
 174:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 176:	8f ef       	ldi	r24, 0xFF	; 255
 178:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// LED Column
 17a:	87 e4       	ldi	r24, 0x47	; 71
 17c:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 17e:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 180:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x81;
 186:	81 e8       	ldi	r24, 0x81	; 129
 188:	88 b9       	out	0x08, r24	; 8
	PORTE = 0x00;
 18a:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 18c:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 18e:	80 e4       	ldi	r24, 0x40	; 64
 190:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 194:	8b e0       	ldi	r24, 0x0B	; 11
 196:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 19a:	88 e1       	ldi	r24, 0x18	; 24
 19c:	90 e0       	ldi	r25, 0x00	; 0
 19e:	90 93 89 00 	sts	0x0089, r25
 1a2:	80 93 88 00 	sts	0x0088, r24

	USART_send_string("\tSetting SPI\r\n");
 1a6:	86 eb       	ldi	r24, 0xB6	; 182
 1a8:	91 e0       	ldi	r25, 0x01	; 1
 1aa:	a8 d0       	rcall	.+336    	; 0x2fc <USART_send_string>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1ac:	81 e5       	ldi	r24, 0x51	; 81
 1ae:	8c bd       	out	0x2c, r24	; 44

}
 1b0:	08 95       	ret

000001b2 <main>:
}



int main(int argc, char **argv)
{	
 1b2:	8f 92       	push	r8
 1b4:	9f 92       	push	r9
 1b6:	af 92       	push	r10
 1b8:	bf 92       	push	r11
 1ba:	cf 92       	push	r12
 1bc:	df 92       	push	r13
 1be:	ef 92       	push	r14
 1c0:	ff 92       	push	r15
 1c2:	0f 93       	push	r16
 1c4:	1f 93       	push	r17
 1c6:	df 93       	push	r29
 1c8:	cf 93       	push	r28
 1ca:	cd b7       	in	r28, 0x3d	; 61
 1cc:	de b7       	in	r29, 0x3e	; 62
 1ce:	2a 97       	sbiw	r28, 0x0a	; 10
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	initialize();
 1da:	ab df       	rcall	.-170    	; 0x132 <initialize>
	clear_array();
 1dc:	20 d1       	rcall	.+576    	; 0x41e <clear_array>
unsigned char initialize_TIMER0()
{
	//See chapter 13 in the data sheet, and look up each of these values in turn.
		
	/* Set the CTC mode */
	TCCR0A = 0b00000010;
 1de:	82 e0       	ldi	r24, 0x02	; 2
 1e0:	84 bd       	out	0x24, r24	; 36
	
	/* Set the Clock Frequency */
	TCCR0B = CK1024;
 1e2:	85 e0       	ldi	r24, 0x05	; 5
 1e4:	85 bd       	out	0x25, r24	; 37
	
	/* Set initial count value */
	OCR0A = 255;
 1e6:	8f ef       	ldi	r24, 0xFF	; 255
 1e8:	87 bd       	out	0x27, r24	; 39
 1ea:	00 e0       	ldi	r16, 0x00	; 0
				
			case PRINT:
				
					USART_send_string("\tPRINT\r\n");
					char buffer[10];
					itoa(x, buffer, 10);
 1ec:	6e 01       	movw	r12, r28
 1ee:	08 94       	sec
 1f0:	c1 1c       	adc	r12, r1
 1f2:	d1 1c       	adc	r13, r1
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1f4:	88 ec       	ldi	r24, 0xC8	; 200
 1f6:	88 2e       	mov	r8, r24
 1f8:	91 2c       	mov	r9, r1
	int x = 0, y = 0, z = 0; //To hold the x and y accelerometer coordinates.
	
	//PORTE = 1;
	
	while(1){
		switch (currState) {
 1fa:	01 30       	cpi	r16, 0x01	; 1
 1fc:	61 f0       	breq	.+24     	; 0x216 <main+0x64>
 1fe:	01 30       	cpi	r16, 0x01	; 1
 200:	e0 f7       	brcc	.-8      	; 0x1fa <main+0x48>
			case IDLE:
				USART_send_string("\tIDLE\r\n");
 202:	85 ec       	ldi	r24, 0xC5	; 197
 204:	91 e0       	ldi	r25, 0x01	; 1
 206:	7a d0       	rcall	.+244    	; 0x2fc <USART_send_string>
				
				if (USART_available() && USART_receive() == 's') {
 208:	6e d0       	rcall	.+220    	; 0x2e6 <USART_available>
 20a:	88 23       	and	r24, r24
 20c:	21 f0       	breq	.+8      	; 0x216 <main+0x64>
 20e:	6f d0       	rcall	.+222    	; 0x2ee <USART_receive>
 210:	83 37       	cpi	r24, 0x73	; 115
 212:	09 f4       	brne	.+2      	; 0x216 <main+0x64>
 214:	54 c0       	rjmp	.+168    	; 0x2be <main+0x10c>
					currState = RUN;
					break;
				}
				
			case RUN:
				USART_send_string("\tRUN\r\n");
 216:	8d ec       	ldi	r24, 0xCD	; 205
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	70 d0       	rcall	.+224    	; 0x2fc <USART_send_string>
				
				if (USART_available() && USART_receive() == 's') {
 21c:	64 d0       	rcall	.+200    	; 0x2e6 <USART_available>
 21e:	88 23       	and	r24, r24
 220:	29 f0       	breq	.+10     	; 0x22c <main+0x7a>
 222:	65 d0       	rcall	.+202    	; 0x2ee <USART_receive>
 224:	83 37       	cpi	r24, 0x73	; 115
 226:	11 f4       	brne	.+4      	; 0x22c <main+0x7a>
 228:	00 e0       	ldi	r16, 0x00	; 0
 22a:	eb cf       	rjmp	.-42     	; 0x202 <main+0x50>
@return This function should return a 1 if the timer has elapsed, else return 0*/
int check_TIMER0()
{
	//look at the TIFR0 register in the datasheet. 
	//Check if the bit is 1
	if (TIFR0 & (1 << OCF0A)) {
 22c:	a9 9b       	sbis	0x15, 1	; 21
 22e:	e5 cf       	rjmp	.-54     	; 0x1fa <main+0x48>
		TIFR0 |= (1 << OCF0A);
 230:	a9 9a       	sbi	0x15, 1	; 21
		TCNT0 = 0;
 232:	16 bc       	out	0x26, r1	; 38
				}
				
				break;
				
			case READ:
				USART_send_string("\tREAD\r\n"); 
 234:	84 ed       	ldi	r24, 0xD4	; 212
 236:	91 e0       	ldi	r25, 0x01	; 1
 238:	61 d0       	rcall	.+194    	; 0x2fc <USART_send_string>
				
				x = read_ADC(5);
 23a:	85 e0       	ldi	r24, 0x05	; 5
 23c:	e3 d0       	rcall	.+454    	; 0x404 <read_ADC>
 23e:	08 2f       	mov	r16, r24
 240:	10 e0       	ldi	r17, 0x00	; 0
				y = read_ADC(6);
 242:	86 e0       	ldi	r24, 0x06	; 6
 244:	df d0       	rcall	.+446    	; 0x404 <read_ADC>
 246:	e8 2e       	mov	r14, r24
 248:	ff 24       	eor	r15, r15
				z = read_ADC(7);
 24a:	87 e0       	ldi	r24, 0x07	; 7
 24c:	db d0       	rcall	.+438    	; 0x404 <read_ADC>
 24e:	a8 2e       	mov	r10, r24
 250:	bb 24       	eor	r11, r11
				currState = PRINT;
				break;
				
			case PRINT:
				
					USART_send_string("\tPRINT\r\n");
 252:	8c ed       	ldi	r24, 0xDC	; 220
 254:	91 e0       	ldi	r25, 0x01	; 1
 256:	52 d0       	rcall	.+164    	; 0x2fc <USART_send_string>
					char buffer[10];
					itoa(x, buffer, 10);
 258:	c8 01       	movw	r24, r16
 25a:	b6 01       	movw	r22, r12
 25c:	4a e0       	ldi	r20, 0x0A	; 10
 25e:	50 e0       	ldi	r21, 0x00	; 0
 260:	39 df       	rcall	.-398    	; 0xd4 <itoa>
 262:	82 e0       	ldi	r24, 0x02	; 2
 264:	9d e0       	ldi	r25, 0x0D	; 13
 266:	f4 01       	movw	r30, r8
 268:	31 97       	sbiw	r30, 0x01	; 1
 26a:	f1 f7       	brne	.-4      	; 0x268 <main+0xb6>
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 26c:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 26e:	d9 f7       	brne	.-10     	; 0x266 <main+0xb4>
					_delay_ms(333);
					USART_send_string(buffer);
 270:	c6 01       	movw	r24, r12
 272:	44 d0       	rcall	.+136    	; 0x2fc <USART_send_string>
					USART_send_string(", ");
 274:	85 ee       	ldi	r24, 0xE5	; 229
 276:	91 e0       	ldi	r25, 0x01	; 1
 278:	41 d0       	rcall	.+130    	; 0x2fc <USART_send_string>
					itoa(y, buffer, 10);
 27a:	c7 01       	movw	r24, r14
 27c:	b6 01       	movw	r22, r12
 27e:	4a e0       	ldi	r20, 0x0A	; 10
 280:	50 e0       	ldi	r21, 0x00	; 0
 282:	28 df       	rcall	.-432    	; 0xd4 <itoa>
 284:	82 e0       	ldi	r24, 0x02	; 2
 286:	9d e0       	ldi	r25, 0x0D	; 13
 288:	f4 01       	movw	r30, r8
 28a:	31 97       	sbiw	r30, 0x01	; 1
 28c:	f1 f7       	brne	.-4      	; 0x28a <main+0xd8>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 28e:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 290:	d9 f7       	brne	.-10     	; 0x288 <main+0xd6>
					_delay_ms(333);
					USART_send_string(buffer);
 292:	c6 01       	movw	r24, r12
 294:	33 d0       	rcall	.+102    	; 0x2fc <USART_send_string>
					USART_send_string(", ");
 296:	85 ee       	ldi	r24, 0xE5	; 229
 298:	91 e0       	ldi	r25, 0x01	; 1
 29a:	30 d0       	rcall	.+96     	; 0x2fc <USART_send_string>
					
					itoa(z, buffer, 10);
 29c:	c5 01       	movw	r24, r10
 29e:	b6 01       	movw	r22, r12
 2a0:	4a e0       	ldi	r20, 0x0A	; 10
 2a2:	50 e0       	ldi	r21, 0x00	; 0
 2a4:	17 df       	rcall	.-466    	; 0xd4 <itoa>
 2a6:	82 e0       	ldi	r24, 0x02	; 2
 2a8:	9d e0       	ldi	r25, 0x0D	; 13
 2aa:	f4 01       	movw	r30, r8
 2ac:	31 97       	sbiw	r30, 0x01	; 1
 2ae:	f1 f7       	brne	.-4      	; 0x2ac <main+0xfa>
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
 2b0:	01 97       	sbiw	r24, 0x01	; 1
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
 2b2:	d9 f7       	brne	.-10     	; 0x2aa <main+0xf8>
					_delay_ms(333);
					USART_send_string(buffer);
 2b4:	c6 01       	movw	r24, r12
 2b6:	22 d0       	rcall	.+68     	; 0x2fc <USART_send_string>
					USART_send_string("\t \r\n");
 2b8:	88 ee       	ldi	r24, 0xE8	; 232
 2ba:	91 e0       	ldi	r25, 0x01	; 1
 2bc:	1f d0       	rcall	.+62     	; 0x2fc <USART_send_string>
 2be:	01 e0       	ldi	r16, 0x01	; 1
 2c0:	aa cf       	rjmp	.-172    	; 0x216 <main+0x64>

000002c2 <USART_init>:
 2c2:	90 93 cd 00 	sts	0x00CD, r25
 2c6:	80 93 cc 00 	sts	0x00CC, r24
 2ca:	88 e1       	ldi	r24, 0x18	; 24
 2cc:	80 93 c9 00 	sts	0x00C9, r24
 2d0:	86 e0       	ldi	r24, 0x06	; 6
 2d2:	80 93 ca 00 	sts	0x00CA, r24
 2d6:	08 95       	ret

000002d8 <USART_transmit>:
 2d8:	90 91 c8 00 	lds	r25, 0x00C8
 2dc:	95 ff       	sbrs	r25, 5
 2de:	fc cf       	rjmp	.-8      	; 0x2d8 <USART_transmit>
 2e0:	80 93 ce 00 	sts	0x00CE, r24
 2e4:	08 95       	ret

000002e6 <USART_available>:
 2e6:	80 91 c8 00 	lds	r24, 0x00C8
 2ea:	80 78       	andi	r24, 0x80	; 128
 2ec:	08 95       	ret

000002ee <USART_receive>:
 2ee:	80 91 c8 00 	lds	r24, 0x00C8
 2f2:	87 ff       	sbrs	r24, 7
 2f4:	fc cf       	rjmp	.-8      	; 0x2ee <USART_receive>
 2f6:	80 91 ce 00 	lds	r24, 0x00CE
 2fa:	08 95       	ret

000002fc <USART_send_string>:
 2fc:	ef 92       	push	r14
 2fe:	ff 92       	push	r15
 300:	cf 93       	push	r28
 302:	df 93       	push	r29
 304:	e8 2e       	mov	r14, r24
 306:	e7 01       	movw	r28, r14
 308:	7e 01       	movw	r14, r28
 30a:	f9 2e       	mov	r15, r25
 30c:	e7 01       	movw	r28, r14
 30e:	01 c0       	rjmp	.+2      	; 0x312 <USART_send_string+0x16>
 310:	e3 df       	rcall	.-58     	; 0x2d8 <USART_transmit>
 312:	89 91       	ld	r24, Y+
 314:	88 23       	and	r24, r24
 316:	e1 f7       	brne	.-8      	; 0x310 <USART_send_string+0x14>
 318:	df 91       	pop	r29
 31a:	cf 91       	pop	r28
 31c:	ff 90       	pop	r15
 31e:	ef 90       	pop	r14
 320:	08 95       	ret

00000322 <ADC_set_channel>:
 322:	ec e7       	ldi	r30, 0x7C	; 124
 324:	f0 e0       	ldi	r31, 0x00	; 0
 326:	90 81       	ld	r25, Z
 328:	90 7e       	andi	r25, 0xE0	; 224
 32a:	90 83       	st	Z, r25
 32c:	90 81       	ld	r25, Z
 32e:	8f 71       	andi	r24, 0x1F	; 31
 330:	89 2b       	or	r24, r25
 332:	80 83       	st	Z, r24
 334:	08 95       	ret

00000336 <ADC_set_adjust>:
 336:	81 30       	cpi	r24, 0x01	; 1
 338:	21 f4       	brne	.+8      	; 0x342 <ADC_set_adjust+0xc>
 33a:	80 91 7c 00 	lds	r24, 0x007C
 33e:	80 62       	ori	r24, 0x20	; 32
 340:	03 c0       	rjmp	.+6      	; 0x348 <ADC_set_adjust+0x12>
 342:	80 91 7c 00 	lds	r24, 0x007C
 346:	8f 7d       	andi	r24, 0xDF	; 223
 348:	80 93 7c 00 	sts	0x007C, r24
 34c:	08 95       	ret

0000034e <ADC_set_prescaler>:
 34e:	ea e7       	ldi	r30, 0x7A	; 122
 350:	f0 e0       	ldi	r31, 0x00	; 0
 352:	90 81       	ld	r25, Z
 354:	98 7f       	andi	r25, 0xF8	; 248
 356:	90 83       	st	Z, r25
 358:	90 81       	ld	r25, Z
 35a:	87 70       	andi	r24, 0x07	; 7
 35c:	89 2b       	or	r24, r25
 35e:	80 83       	st	Z, r24
 360:	08 95       	ret

00000362 <ADC_set_free_running>:
 362:	88 23       	and	r24, r24
 364:	99 f0       	breq	.+38     	; 0x38c <ADC_set_free_running+0x2a>
 366:	80 91 7b 00 	lds	r24, 0x007B
 36a:	8b 7f       	andi	r24, 0xFB	; 251
 36c:	80 93 7b 00 	sts	0x007B, r24
 370:	80 91 7b 00 	lds	r24, 0x007B
 374:	8d 7f       	andi	r24, 0xFD	; 253
 376:	80 93 7b 00 	sts	0x007B, r24
 37a:	80 91 7b 00 	lds	r24, 0x007B
 37e:	8e 7f       	andi	r24, 0xFE	; 254
 380:	80 93 7b 00 	sts	0x007B, r24
 384:	80 91 7a 00 	lds	r24, 0x007A
 388:	80 62       	ori	r24, 0x20	; 32
 38a:	03 c0       	rjmp	.+6      	; 0x392 <ADC_set_free_running+0x30>
 38c:	80 91 7a 00 	lds	r24, 0x007A
 390:	8f 7d       	andi	r24, 0xDF	; 223
 392:	80 93 7a 00 	sts	0x007A, r24
 396:	08 95       	ret

00000398 <ADC_enable>:
 398:	ea e7       	ldi	r30, 0x7A	; 122
 39a:	f0 e0       	ldi	r31, 0x00	; 0
 39c:	80 81       	ld	r24, Z
 39e:	80 68       	ori	r24, 0x80	; 128
 3a0:	80 83       	st	Z, r24
 3a2:	08 95       	ret

000003a4 <ADC_start>:
 3a4:	ea e7       	ldi	r30, 0x7A	; 122
 3a6:	f0 e0       	ldi	r31, 0x00	; 0
 3a8:	80 81       	ld	r24, Z
 3aa:	80 64       	ori	r24, 0x40	; 64
 3ac:	80 83       	st	Z, r24
 3ae:	08 95       	ret

000003b0 <ADC_finish>:
 3b0:	ea e7       	ldi	r30, 0x7A	; 122
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	80 61       	ori	r24, 0x10	; 16
 3b8:	80 83       	st	Z, r24
 3ba:	08 95       	ret

000003bc <ADC_done>:
 3bc:	90 91 7a 00 	lds	r25, 0x007A
 3c0:	81 e0       	ldi	r24, 0x01	; 1
 3c2:	94 ff       	sbrs	r25, 4
 3c4:	80 e0       	ldi	r24, 0x00	; 0
 3c6:	08 95       	ret

000003c8 <ADC_set_reference>:
 3c8:	90 91 7c 00 	lds	r25, 0x007C
 3cc:	9f 73       	andi	r25, 0x3F	; 63
 3ce:	90 93 7c 00 	sts	0x007C, r25
 3d2:	90 91 7c 00 	lds	r25, 0x007C
 3d6:	80 7c       	andi	r24, 0xC0	; 192
 3d8:	89 2b       	or	r24, r25
 3da:	80 93 7c 00 	sts	0x007C, r24
 3de:	e2 df       	rcall	.-60     	; 0x3a4 <ADC_start>
 3e0:	ed df       	rcall	.-38     	; 0x3bc <ADC_done>
 3e2:	88 23       	and	r24, r24
 3e4:	e9 f3       	breq	.-6      	; 0x3e0 <ADC_set_reference+0x18>
 3e6:	e4 cf       	rjmp	.-56     	; 0x3b0 <ADC_finish>

000003e8 <setup_ADC>:
 3e8:	df 93       	push	r29
 3ea:	cf 93       	push	r28
 3ec:	0f 92       	push	r0
 3ee:	cd b7       	in	r28, 0x3d	; 61
 3f0:	de b7       	in	r29, 0x3e	; 62
 3f2:	69 83       	std	Y+1, r22	; 0x01
 3f4:	ac df       	rcall	.-168    	; 0x34e <ADC_set_prescaler>
 3f6:	69 81       	ldd	r22, Y+1	; 0x01
 3f8:	86 2f       	mov	r24, r22
 3fa:	b3 df       	rcall	.-154    	; 0x362 <ADC_set_free_running>
 3fc:	0f 90       	pop	r0
 3fe:	cf 91       	pop	r28
 400:	df 91       	pop	r29
 402:	08 95       	ret

00000404 <read_ADC>:
 404:	8e df       	rcall	.-228    	; 0x322 <ADC_set_channel>
 406:	80 e0       	ldi	r24, 0x00	; 0
 408:	96 df       	rcall	.-212    	; 0x336 <ADC_set_adjust>
 40a:	cc df       	rcall	.-104    	; 0x3a4 <ADC_start>
 40c:	d7 df       	rcall	.-82     	; 0x3bc <ADC_done>
 40e:	88 23       	and	r24, r24
 410:	e9 f3       	breq	.-6      	; 0x40c <read_ADC+0x8>
 412:	ce df       	rcall	.-100    	; 0x3b0 <ADC_finish>
 414:	80 91 78 00 	lds	r24, 0x0078
 418:	90 91 79 00 	lds	r25, 0x0079
 41c:	08 95       	ret

0000041e <clear_array>:
 41e:	08 95       	ret

00000420 <__udivmodhi4>:
 420:	aa 1b       	sub	r26, r26
 422:	bb 1b       	sub	r27, r27
 424:	51 e1       	ldi	r21, 0x11	; 17
 426:	07 c0       	rjmp	.+14     	; 0x436 <__udivmodhi4_ep>

00000428 <__udivmodhi4_loop>:
 428:	aa 1f       	adc	r26, r26
 42a:	bb 1f       	adc	r27, r27
 42c:	a6 17       	cp	r26, r22
 42e:	b7 07       	cpc	r27, r23
 430:	10 f0       	brcs	.+4      	; 0x436 <__udivmodhi4_ep>
 432:	a6 1b       	sub	r26, r22
 434:	b7 0b       	sbc	r27, r23

00000436 <__udivmodhi4_ep>:
 436:	88 1f       	adc	r24, r24
 438:	99 1f       	adc	r25, r25
 43a:	5a 95       	dec	r21
 43c:	a9 f7       	brne	.-22     	; 0x428 <__udivmodhi4_loop>
 43e:	80 95       	com	r24
 440:	90 95       	com	r25
 442:	bc 01       	movw	r22, r24
 444:	cd 01       	movw	r24, r26
 446:	08 95       	ret

00000448 <_exit>:
 448:	f8 94       	cli

0000044a <__stop_program>:
 44a:	ff cf       	rjmp	.-2      	; 0x44a <__stop_program>
