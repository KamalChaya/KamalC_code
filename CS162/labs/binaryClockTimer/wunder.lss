
wunder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000bc  00800100  000005c8  0000063c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000005c8  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 00000220  00000000  00000000  000006f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000377  00000000  00000000  00000918  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   000012cb  00000000  00000000  00000c8f  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000688  00000000  00000000  00001f5a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001849  00000000  00000000  000025e2  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000003a0  00000000  00000000  00003e2c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000556  00000000  00000000  000041cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000d80  00000000  00000000  00004722  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000220  00000000  00000000  000054a2  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 000000f2  00000000  00000000  000056c2  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
	itoa(n, convBuf, 10);
	strcat(finBuf, convBuf);
	
	if (dispColon == TRUE) 
		strcat(finBuf, ":");
}
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 ec       	ldi	r30, 0xC8	; 200
  ac:	f5 e0       	ldi	r31, 0x05	; 5
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	ac 3b       	cpi	r26, 0xBC	; 188
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	ac eb       	ldi	r26, 0xBC	; 188
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	ac 3b       	cpi	r26, 0xBC	; 188
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	9b d0       	rcall	.+310    	; 0x206 <main>
  d0:	79 c2       	rjmp	.+1266   	; 0x5c4 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initialize>:
#define TRUE 1
#define FALSE 0

void initialize( void )
{
	CPU_PRESCALE(0);
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	10 82       	st	Z, r1
	
	USART_init(BAUD_RATE);
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	aa d1       	rcall	.+852    	; 0x438 <USART_init>
	USART_transmit('\f');	// Send form feed to clear the terminal.
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	b3 d1       	rcall	.+870    	; 0x44e <USART_transmit>
	USART_send_string("WunderBoard initializing...\r\n");
  e8:	82 e0       	ldi	r24, 0x02	; 2
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	c2 d1       	rcall	.+900    	; 0x472 <USART_send_string>
	
	USART_send_string("\tSetting ADC prescaler and disabling free running mode...\r\n");
  ee:	80 e2       	ldi	r24, 0x20	; 32
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	bf d1       	rcall	.+894    	; 0x472 <USART_send_string>
	setup_ADC(ADC_PRESCALER_32, FALSE);
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	1c d2       	rcall	.+1080   	; 0x532 <setup_ADC>
	
	USART_send_string("\tEnabling ADC...\r\n");
  fa:	8c e5       	ldi	r24, 0x5C	; 92
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	b9 d1       	rcall	.+882    	; 0x472 <USART_send_string>
	ADC_enable();
 100:	f0 d1       	rcall	.+992    	; 0x4e2 <ADC_enable>
	
	USART_send_string("\tSetting ADC reference to Vcc...\r\n");
 102:	8f e6       	ldi	r24, 0x6F	; 111
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	b5 d1       	rcall	.+874    	; 0x472 <USART_send_string>
	ADC_set_reference(ADC_REF_VCC);
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	03 d2       	rcall	.+1030   	; 0x512 <ADC_set_reference>
	
	// Configure IO //
	USART_send_string("\tConfiguring IO...\r\n");
 10c:	82 e9       	ldi	r24, 0x92	; 146
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	b0 d1       	rcall	.+864    	; 0x472 <USART_send_string>
	//DDRx corresponds to PORTx/PINx, dependng on direction of data flow -- PORT for output, PIN for input
	DDRA = 0x00;	// Buttons and switches
 112:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 114:	87 ee       	ldi	r24, 0xE7	; 231
 116:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// LED Column
 11c:	87 e4       	ldi	r24, 0x47	; 71
 11e:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 120:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 122:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x81;
 128:	81 e8       	ldi	r24, 0x81	; 129
 12a:	88 b9       	out	0x08, r24	; 8
	PORTE = 0x00;
 12c:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 12e:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 89 00 	sts	0x0089, r25
 144:	80 93 88 00 	sts	0x0088, r24

	USART_send_string("\tSetting SPI\r\n");
 148:	87 ea       	ldi	r24, 0xA7	; 167
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	92 d1       	rcall	.+804    	; 0x472 <USART_send_string>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 14e:	81 e5       	ldi	r24, 0x51	; 81
 150:	8c bd       	out	0x2c, r24	; 44

}
 152:	08 95       	ret

00000154 <reverse>:
 void reverse(char s[])
 {
 154:	cf 93       	push	r28
 156:	df 93       	push	r29
     int i, j;
     char a;
 
     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 158:	dc 01       	movw	r26, r24
 15a:	0d 90       	ld	r0, X+
 15c:	00 20       	and	r0, r0
 15e:	e9 f7       	brne	.-6      	; 0x15a <reverse+0x6>
 160:	11 97       	sbiw	r26, 0x01	; 1
 162:	a8 1b       	sub	r26, r24
 164:	b9 0b       	sbc	r27, r25
 166:	ad 01       	movw	r20, r26
 168:	41 50       	subi	r20, 0x01	; 1
 16a:	50 40       	sbci	r21, 0x00	; 0
 16c:	ec 01       	movw	r28, r24
 16e:	fc 01       	movw	r30, r24
 170:	ea 0f       	add	r30, r26
 172:	fb 1f       	adc	r31, r27
 174:	20 e0       	ldi	r18, 0x00	; 0
 176:	30 e0       	ldi	r19, 0x00	; 0
 178:	08 c0       	rjmp	.+16     	; 0x18a <reverse+0x36>
         a = s[i];
 17a:	98 81       	ld	r25, Y
         s[i] = s[j];
 17c:	80 81       	ld	r24, Z
 17e:	89 93       	st	Y+, r24
         s[j] = a;
 180:	90 83       	st	Z, r25
 void reverse(char s[])
 {
     int i, j;
     char a;
 
     for (i = 0, j = strlen(s)-1; i<j; i++, j--) {
 182:	2f 5f       	subi	r18, 0xFF	; 255
 184:	3f 4f       	sbci	r19, 0xFF	; 255
 186:	41 50       	subi	r20, 0x01	; 1
 188:	50 40       	sbci	r21, 0x00	; 0
 18a:	31 97       	sbiw	r30, 0x01	; 1
 18c:	24 17       	cp	r18, r20
 18e:	35 07       	cpc	r19, r21
 190:	a4 f3       	brlt	.-24     	; 0x17a <reverse+0x26>
         a = s[i];
         s[i] = s[j];
         s[j] = a;
     }
 }
 192:	df 91       	pop	r29
 194:	cf 91       	pop	r28
 196:	08 95       	ret

00000198 <itoa1>:
 
  void itoa1(int n, char c[])
 {
 198:	ef 92       	push	r14
 19a:	ff 92       	push	r15
 19c:	0f 93       	push	r16
 19e:	1f 93       	push	r17
 1a0:	cf 93       	push	r28
 1a2:	df 93       	push	r29
 1a4:	8c 01       	movw	r16, r24
 1a6:	7b 01       	movw	r14, r22
 1a8:	9c 01       	movw	r18, r24
 1aa:	97 ff       	sbrs	r25, 7
 1ac:	04 c0       	rjmp	.+8      	; 0x1b6 <itoa1+0x1e>
 1ae:	22 27       	eor	r18, r18
 1b0:	33 27       	eor	r19, r19
 1b2:	28 1b       	sub	r18, r24
 1b4:	39 0b       	sbc	r19, r25
 1b6:	c0 e0       	ldi	r28, 0x00	; 0
 1b8:	d0 e0       	ldi	r29, 0x00	; 0
 
     if (signOfN  < 0)  
         n = -n;   //make number positive if negative.       
   
     do {       
         c[i] = n % 10 + '0';  //
 1ba:	f7 01       	movw	r30, r14
 1bc:	ec 0f       	add	r30, r28
 1be:	fd 1f       	adc	r31, r29
 1c0:	c9 01       	movw	r24, r18
 1c2:	6a e0       	ldi	r22, 0x0A	; 10
 1c4:	70 e0       	ldi	r23, 0x00	; 0
 1c6:	eb d1       	rcall	.+982    	; 0x59e <__divmodhi4>
 1c8:	80 5d       	subi	r24, 0xD0	; 208
 1ca:	80 83       	st	Z, r24
		 i++;
 1cc:	21 96       	adiw	r28, 0x01	; 1
     } while ((n /= 10) > 0);  
 1ce:	c9 01       	movw	r24, r18
 1d0:	6a e0       	ldi	r22, 0x0A	; 10
 1d2:	70 e0       	ldi	r23, 0x00	; 0
 1d4:	e4 d1       	rcall	.+968    	; 0x59e <__divmodhi4>
 1d6:	9b 01       	movw	r18, r22
 1d8:	16 16       	cp	r1, r22
 1da:	17 06       	cpc	r1, r23
 1dc:	74 f3       	brlt	.-36     	; 0x1ba <itoa1+0x22>
	 
     if (signOfN < 0) {
 1de:	17 ff       	sbrs	r17, 7
 1e0:	06 c0       	rjmp	.+12     	; 0x1ee <itoa1+0x56>
         c[i] = '-';
 1e2:	f7 01       	movw	r30, r14
 1e4:	ec 0f       	add	r30, r28
 1e6:	fd 1f       	adc	r31, r29
 1e8:	8d e2       	ldi	r24, 0x2D	; 45
 1ea:	80 83       	st	Z, r24
		 i++;
 1ec:	21 96       	adiw	r28, 0x01	; 1
	 }
	 
     c[i] = '\0';
 1ee:	ce 0d       	add	r28, r14
 1f0:	df 1d       	adc	r29, r15
 1f2:	18 82       	st	Y, r1
	 
     reverse(c);
 1f4:	c7 01       	movw	r24, r14
 1f6:	ae df       	rcall	.-164    	; 0x154 <reverse>
 }
 1f8:	df 91       	pop	r29
 1fa:	cf 91       	pop	r28
 1fc:	1f 91       	pop	r17
 1fe:	0f 91       	pop	r16
 200:	ff 90       	pop	r15
 202:	ef 90       	pop	r14
 204:	08 95       	ret

00000206 <main>:
}



int main(int argc, char **argv)
{	
 206:	2f 92       	push	r2
 208:	3f 92       	push	r3
 20a:	4f 92       	push	r4
 20c:	5f 92       	push	r5
 20e:	6f 92       	push	r6
 210:	7f 92       	push	r7
 212:	8f 92       	push	r8
 214:	9f 92       	push	r9
 216:	af 92       	push	r10
 218:	bf 92       	push	r11
 21a:	cf 92       	push	r12
 21c:	df 92       	push	r13
 21e:	ef 92       	push	r14
 220:	ff 92       	push	r15
 222:	0f 93       	push	r16
 224:	1f 93       	push	r17
 226:	df 93       	push	r29
 228:	cf 93       	push	r28
 22a:	cd b7       	in	r28, 0x3d	; 61
 22c:	de b7       	in	r29, 0x3e	; 62
 22e:	64 97       	sbiw	r28, 0x14	; 20
 230:	0f b6       	in	r0, 0x3f	; 63
 232:	f8 94       	cli
 234:	de bf       	out	0x3e, r29	; 62
 236:	0f be       	out	0x3f, r0	; 63
 238:	cd bf       	out	0x3d, r28	; 61
	initialize();
 23a:	4c df       	rcall	.-360    	; 0xd4 <initialize>
	clear_array();
 23c:	9b d1       	rcall	.+822    	; 0x574 <clear_array>
unsigned char initialize_TIMER0()
{
	//See chapter 13 in the data sheet, and look up each of these values in turn.
		
	/* Set the CTC mode */
	TCCR0A = 0b00000010;
 23e:	82 e0       	ldi	r24, 0x02	; 2
 240:	84 bd       	out	0x24, r24	; 36
	
	/* Set the Clock Frequency */
	TCCR0B = CK1024;
 242:	85 e0       	ldi	r24, 0x05	; 5
 244:	85 bd       	out	0x25, r24	; 37
	
	/* Set initial count value */
	OCR0A = 255;
 246:	8f ef       	ldi	r24, 0xFF	; 255
 248:	87 bd       	out	0x27, r24	; 39
	
	//set_TIMER0(CK1024, 127);
	//24 hr clock, init at 00:00:00
	
	while (1) {
		if (USART_available() && USART_receive() == 's') {
 24a:	08 d1       	rcall	.+528    	; 0x45c <USART_available>
 24c:	88 23       	and	r24, r24
 24e:	e9 f3       	breq	.-6      	; 0x24a <main+0x44>
 250:	09 d1       	rcall	.+530    	; 0x464 <USART_receive>
 252:	83 37       	cpi	r24, 0x73	; 115
 254:	d1 f7       	brne	.-12     	; 0x24a <main+0x44>
 256:	e9 c0       	rjmp	.+466    	; 0x42a <main+0x224>
				int fourCntH1 = 0;
				
				
				for (h10 = 0; h10 <= 2; h10++) {
					for (h1 = 0; h1 <= 9; h1++) {
						if (h1 == 4)
 258:	04 30       	cpi	r16, 0x04	; 4
 25a:	11 05       	cpc	r17, r1
 25c:	29 f4       	brne	.+10     	; 0x268 <main+0x62>
							fourCntH1++;
 25e:	8b 89       	ldd	r24, Y+19	; 0x13
 260:	9c 89       	ldd	r25, Y+20	; 0x14
 262:	01 96       	adiw	r24, 0x01	; 1
 264:	9c 8b       	std	Y+20, r25	; 0x14
 266:	8b 8b       	std	Y+19, r24	; 0x13
 268:	66 24       	eor	r6, r6
 26a:	77 24       	eor	r7, r7
 26c:	ce c0       	rjmp	.+412    	; 0x40a <main+0x204>
@return This function should return a 1 if the timer has elapsed, else return 0*/
int check_TIMER0()
{
	//look at the TIFR0 register in the datasheet. 
	//Check if the bit is 1
	if (TIFR0 & (1 << OCF0A)) {
 26e:	a9 9b       	sbis	0x15, 1	; 21
 270:	fe cf       	rjmp	.-4      	; 0x26e <main+0x68>
		TIFR0 |= (1 << OCF0A);
 272:	a9 9a       	sbi	0x15, 1	; 21
		TCNT0 = 0;
 274:	16 bc       	out	0x26, r1	; 38
										 
										 
										 
										for (i = 0; i <= 35; i++) {
											while(!check_TIMER0());
											if (fourCntH1 == 3) {
 276:	8b 89       	ldd	r24, Y+19	; 0x13
 278:	9c 89       	ldd	r25, Y+20	; 0x14
 27a:	03 97       	sbiw	r24, 0x03	; 3
 27c:	41 f5       	brne	.+80     	; 0x2ce <main+0xc8>
												PORTE = 4; //For hours 1's place
 27e:	94 e0       	ldi	r25, 0x04	; 4
 280:	9e b9       	out	0x0e, r25	; 14
												set_array_blue(h1);
 282:	80 2f       	mov	r24, r16
 284:	64 d1       	rcall	.+712    	; 0x54e <set_array_blue>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 286:	c2 01       	movw	r24, r4
 288:	01 97       	sbiw	r24, 0x01	; 1
 28a:	f1 f7       	brne	.-4      	; 0x288 <main+0x82>
												_delay_ms(LED_DELAY);
												set_array_blue(0);
 28c:	80 e0       	ldi	r24, 0x00	; 0
 28e:	5f d1       	rcall	.+702    	; 0x54e <set_array_blue>
														
												PORTE = 5; //For hours 10's place
 290:	85 e0       	ldi	r24, 0x05	; 5
 292:	8e b9       	out	0x0e, r24	; 14
												set_array_blue(h10);
 294:	8e 2d       	mov	r24, r14
 296:	5b d1       	rcall	.+694    	; 0x54e <set_array_blue>
 298:	c2 01       	movw	r24, r4
 29a:	01 97       	sbiw	r24, 0x01	; 1
 29c:	f1 f7       	brne	.-4      	; 0x29a <main+0x94>
												_delay_ms(LED_DELAY);
												set_array_blue(0);
 29e:	80 e0       	ldi	r24, 0x00	; 0
 2a0:	56 d1       	rcall	.+684    	; 0x54e <set_array_blue>
 2a2:	60 ed       	ldi	r22, 0xD0	; 208
 2a4:	26 2e       	mov	r2, r22
 2a6:	67 e0       	ldi	r22, 0x07	; 7
 2a8:	36 2e       	mov	r3, r22
 2aa:	5a e0       	ldi	r21, 0x0A	; 10
 2ac:	c5 2e       	mov	r12, r21
 2ae:	d1 2c       	mov	r13, r1
 2b0:	46 e0       	ldi	r20, 0x06	; 6
 2b2:	a4 2e       	mov	r10, r20
 2b4:	b1 2c       	mov	r11, r1
 2b6:	0a e0       	ldi	r16, 0x0A	; 10
 2b8:	10 e0       	ldi	r17, 0x00	; 0
 2ba:	33 e0       	ldi	r19, 0x03	; 3
 2bc:	e3 2e       	mov	r14, r19
 2be:	f1 2c       	mov	r15, r1
 2c0:	2a e0       	ldi	r18, 0x0A	; 10
 2c2:	82 2e       	mov	r8, r18
 2c4:	91 2c       	mov	r9, r1
 2c6:	96 e0       	ldi	r25, 0x06	; 6
 2c8:	69 2e       	mov	r6, r25
 2ca:	71 2c       	mov	r7, r1
 2cc:	35 c0       	rjmp	.+106    	; 0x338 <main+0x132>
												h10 = 3;
												i = 2000;	
											}
												
											else {
												PORTE = 5; //For hours 10's place
 2ce:	95 e0       	ldi	r25, 0x05	; 5
 2d0:	9e b9       	out	0x0e, r25	; 14
												set_array_blue(h10);
 2d2:	8e 2d       	mov	r24, r14
 2d4:	3c d1       	rcall	.+632    	; 0x54e <set_array_blue>
 2d6:	c2 01       	movw	r24, r4
 2d8:	01 97       	sbiw	r24, 0x01	; 1
 2da:	f1 f7       	brne	.-4      	; 0x2d8 <main+0xd2>
												_delay_ms(LED_DELAY);
												set_array_blue(0);	
 2dc:	80 e0       	ldi	r24, 0x00	; 0
 2de:	37 d1       	rcall	.+622    	; 0x54e <set_array_blue>
												
												PORTE = 4; //For hours 1's place
 2e0:	84 e0       	ldi	r24, 0x04	; 4
 2e2:	8e b9       	out	0x0e, r24	; 14
												set_array_blue(h1);
 2e4:	80 2f       	mov	r24, r16
 2e6:	33 d1       	rcall	.+614    	; 0x54e <set_array_blue>
 2e8:	c2 01       	movw	r24, r4
 2ea:	01 97       	sbiw	r24, 0x01	; 1
 2ec:	f1 f7       	brne	.-4      	; 0x2ea <main+0xe4>
												_delay_ms(LED_DELAY);
												set_array_blue(0);	
 2ee:	80 e0       	ldi	r24, 0x00	; 0
 2f0:	2e d1       	rcall	.+604    	; 0x54e <set_array_blue>
												
												PORTE = 3; //For minutes 10's place
 2f2:	93 e0       	ldi	r25, 0x03	; 3
 2f4:	9e b9       	out	0x0e, r25	; 14
												set_array_blue(m10);
 2f6:	86 2d       	mov	r24, r6
 2f8:	2a d1       	rcall	.+596    	; 0x54e <set_array_blue>
 2fa:	c2 01       	movw	r24, r4
 2fc:	01 97       	sbiw	r24, 0x01	; 1
 2fe:	f1 f7       	brne	.-4      	; 0x2fc <main+0xf6>
												_delay_ms(LED_DELAY);
												set_array_blue(0);	
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	25 d1       	rcall	.+586    	; 0x54e <set_array_blue>
												
												PORTE = 2; //For minutes 1's place
 304:	82 e0       	ldi	r24, 0x02	; 2
 306:	8e b9       	out	0x0e, r24	; 14
												set_array_blue(m1);
 308:	88 2d       	mov	r24, r8
 30a:	21 d1       	rcall	.+578    	; 0x54e <set_array_blue>
 30c:	c2 01       	movw	r24, r4
 30e:	01 97       	sbiw	r24, 0x01	; 1
 310:	f1 f7       	brne	.-4      	; 0x30e <main+0x108>
												_delay_ms(LED_DELAY);
												set_array_blue(0);	
 312:	80 e0       	ldi	r24, 0x00	; 0
 314:	1c d1       	rcall	.+568    	; 0x54e <set_array_blue>
												
												PORTE = 1; //For seconds 10's place
 316:	91 e0       	ldi	r25, 0x01	; 1
 318:	9e b9       	out	0x0e, r25	; 14
												set_array_blue(s10);
 31a:	8a 2d       	mov	r24, r10
 31c:	18 d1       	rcall	.+560    	; 0x54e <set_array_blue>
 31e:	c2 01       	movw	r24, r4
 320:	01 97       	sbiw	r24, 0x01	; 1
 322:	f1 f7       	brne	.-4      	; 0x320 <main+0x11a>
												_delay_ms(LED_DELAY);
												set_array_blue(0);												
 324:	80 e0       	ldi	r24, 0x00	; 0
 326:	13 d1       	rcall	.+550    	; 0x54e <set_array_blue>
												
												PORTE = 0; //For seconds 1's place
 328:	1e b8       	out	0x0e, r1	; 14
												set_array_blue(s1); 
 32a:	8c 2d       	mov	r24, r12
 32c:	10 d1       	rcall	.+544    	; 0x54e <set_array_blue>
 32e:	c2 01       	movw	r24, r4
 330:	01 97       	sbiw	r24, 0x01	; 1
 332:	f1 f7       	brne	.-4      	; 0x330 <main+0x12a>
												_delay_ms(LED_DELAY);
												set_array_blue(0);
 334:	80 e0       	ldi	r24, 0x00	; 0
 336:	0b d1       	rcall	.+534    	; 0x54e <set_array_blue>
											 */
											//Concatenate the integers on to the final buffer
											

											
											itoa1(h10, h10buf);	
 338:	c7 01       	movw	r24, r14
 33a:	be 01       	movw	r22, r28
 33c:	6f 5f       	subi	r22, 0xFF	; 255
 33e:	7f 4f       	sbci	r23, 0xFF	; 255
 340:	2b df       	rcall	.-426    	; 0x198 <itoa1>
											itoa1(h1, h1buf);
 342:	c8 01       	movw	r24, r16
 344:	be 01       	movw	r22, r28
 346:	6c 5f       	subi	r22, 0xFC	; 252
 348:	7f 4f       	sbci	r23, 0xFF	; 255
 34a:	26 df       	rcall	.-436    	; 0x198 <itoa1>
											itoa1(m10, m10buf);
 34c:	c3 01       	movw	r24, r6
 34e:	be 01       	movw	r22, r28
 350:	69 5f       	subi	r22, 0xF9	; 249
 352:	7f 4f       	sbci	r23, 0xFF	; 255
 354:	21 df       	rcall	.-446    	; 0x198 <itoa1>
											itoa1(m1, m1buf);
 356:	c4 01       	movw	r24, r8
 358:	be 01       	movw	r22, r28
 35a:	66 5f       	subi	r22, 0xF6	; 246
 35c:	7f 4f       	sbci	r23, 0xFF	; 255
 35e:	1c df       	rcall	.-456    	; 0x198 <itoa1>
											itoa1(s10, s10buf);
 360:	c5 01       	movw	r24, r10
 362:	be 01       	movw	r22, r28
 364:	63 5f       	subi	r22, 0xF3	; 243
 366:	7f 4f       	sbci	r23, 0xFF	; 255
 368:	17 df       	rcall	.-466    	; 0x198 <itoa1>
											itoa1(s1, s1buf);
 36a:	c6 01       	movw	r24, r12
 36c:	be 01       	movw	r22, r28
 36e:	60 5f       	subi	r22, 0xF0	; 240
 370:	7f 4f       	sbci	r23, 0xFF	; 255
 372:	12 df       	rcall	.-476    	; 0x198 <itoa1>
											
												
											USART_send_string(h10buf);
 374:	ce 01       	movw	r24, r28
 376:	01 96       	adiw	r24, 0x01	; 1
 378:	7c d0       	rcall	.+248    	; 0x472 <USART_send_string>
											USART_send_string(h1buf);
 37a:	ce 01       	movw	r24, r28
 37c:	04 96       	adiw	r24, 0x04	; 4
 37e:	79 d0       	rcall	.+242    	; 0x472 <USART_send_string>
											USART_send_string(":");
 380:	80 e0       	ldi	r24, 0x00	; 0
 382:	91 e0       	ldi	r25, 0x01	; 1
 384:	76 d0       	rcall	.+236    	; 0x472 <USART_send_string>
											USART_send_string(m10buf);
 386:	ce 01       	movw	r24, r28
 388:	07 96       	adiw	r24, 0x07	; 7
 38a:	73 d0       	rcall	.+230    	; 0x472 <USART_send_string>
											USART_send_string(m1buf);
 38c:	ce 01       	movw	r24, r28
 38e:	0a 96       	adiw	r24, 0x0a	; 10
 390:	70 d0       	rcall	.+224    	; 0x472 <USART_send_string>
											USART_send_string(":");
 392:	80 e0       	ldi	r24, 0x00	; 0
 394:	91 e0       	ldi	r25, 0x01	; 1
 396:	6d d0       	rcall	.+218    	; 0x472 <USART_send_string>
											USART_send_string(s10buf);
 398:	ce 01       	movw	r24, r28
 39a:	0d 96       	adiw	r24, 0x0d	; 13
 39c:	6a d0       	rcall	.+212    	; 0x472 <USART_send_string>
											USART_send_string(s1buf);
 39e:	ce 01       	movw	r24, r28
 3a0:	40 96       	adiw	r24, 0x10	; 16
 3a2:	67 d0       	rcall	.+206    	; 0x472 <USART_send_string>
												
											

											//The final buffer has the time, now show it on the screen
											USART_send_string("\t \r\n");																						
 3a4:	86 eb       	ldi	r24, 0xB6	; 182
 3a6:	91 e0       	ldi	r25, 0x01	; 1
 3a8:	64 d0       	rcall	.+200    	; 0x472 <USART_send_string>
										 i iterates up to until it would be 1 second.
										 */
										 
										 
										 
										for (i = 0; i <= 35; i++) {
 3aa:	08 94       	sec
 3ac:	21 1c       	adc	r2, r1
 3ae:	31 1c       	adc	r3, r1
 3b0:	84 e2       	ldi	r24, 0x24	; 36
 3b2:	28 16       	cp	r2, r24
 3b4:	31 04       	cpc	r3, r1
 3b6:	0c f4       	brge	.+2      	; 0x3ba <main+0x1b4>
 3b8:	5a cf       	rjmp	.-332    	; 0x26e <main+0x68>
							fourCntH1++;
					
						for (m10 = 0; m10 <= 5; m10++) {
							for (m1 = 0; m1 <= 9; m1++) {
								for (s10 = 0; s10 <= 5; s10++) {
									for (s1 = 0; s1 <= 9; s1++) {
 3ba:	08 94       	sec
 3bc:	c1 1c       	adc	r12, r1
 3be:	d1 1c       	adc	r13, r1
 3c0:	9a e0       	ldi	r25, 0x0A	; 10
 3c2:	c9 16       	cp	r12, r25
 3c4:	d1 04       	cpc	r13, r1
 3c6:	1c f4       	brge	.+6      	; 0x3ce <main+0x1c8>
 3c8:	22 24       	eor	r2, r2
 3ca:	33 24       	eor	r3, r3
 3cc:	50 cf       	rjmp	.-352    	; 0x26e <main+0x68>
						if (h1 == 4)
							fourCntH1++;
					
						for (m10 = 0; m10 <= 5; m10++) {
							for (m1 = 0; m1 <= 9; m1++) {
								for (s10 = 0; s10 <= 5; s10++) {
 3ce:	08 94       	sec
 3d0:	a1 1c       	adc	r10, r1
 3d2:	b1 1c       	adc	r11, r1
 3d4:	86 e0       	ldi	r24, 0x06	; 6
 3d6:	a8 16       	cp	r10, r24
 3d8:	b1 04       	cpc	r11, r1
 3da:	34 f4       	brge	.+12     	; 0x3e8 <main+0x1e2>
 3dc:	cc 24       	eor	r12, r12
 3de:	dd 24       	eor	r13, r13
 3e0:	88 ec       	ldi	r24, 0xC8	; 200
 3e2:	48 2e       	mov	r4, r24
 3e4:	51 2c       	mov	r5, r1
 3e6:	f0 cf       	rjmp	.-32     	; 0x3c8 <main+0x1c2>
					for (h1 = 0; h1 <= 9; h1++) {
						if (h1 == 4)
							fourCntH1++;
					
						for (m10 = 0; m10 <= 5; m10++) {
							for (m1 = 0; m1 <= 9; m1++) {
 3e8:	08 94       	sec
 3ea:	81 1c       	adc	r8, r1
 3ec:	91 1c       	adc	r9, r1
 3ee:	9a e0       	ldi	r25, 0x0A	; 10
 3f0:	89 16       	cp	r8, r25
 3f2:	91 04       	cpc	r9, r1
 3f4:	1c f4       	brge	.+6      	; 0x3fc <main+0x1f6>
 3f6:	aa 24       	eor	r10, r10
 3f8:	bb 24       	eor	r11, r11
 3fa:	f0 cf       	rjmp	.-32     	; 0x3dc <main+0x1d6>
				for (h10 = 0; h10 <= 2; h10++) {
					for (h1 = 0; h1 <= 9; h1++) {
						if (h1 == 4)
							fourCntH1++;
					
						for (m10 = 0; m10 <= 5; m10++) {
 3fc:	08 94       	sec
 3fe:	61 1c       	adc	r6, r1
 400:	71 1c       	adc	r7, r1
 402:	86 e0       	ldi	r24, 0x06	; 6
 404:	68 16       	cp	r6, r24
 406:	71 04       	cpc	r7, r1
 408:	1c f4       	brge	.+6      	; 0x410 <main+0x20a>
 40a:	88 24       	eor	r8, r8
 40c:	99 24       	eor	r9, r9
 40e:	f3 cf       	rjmp	.-26     	; 0x3f6 <main+0x1f0>
				 */
				int fourCntH1 = 0;
				
				
				for (h10 = 0; h10 <= 2; h10++) {
					for (h1 = 0; h1 <= 9; h1++) {
 410:	0f 5f       	subi	r16, 0xFF	; 255
 412:	1f 4f       	sbci	r17, 0xFF	; 255
 414:	0a 30       	cpi	r16, 0x0A	; 10
 416:	11 05       	cpc	r17, r1
 418:	0c f4       	brge	.+2      	; 0x41c <main+0x216>
 41a:	1e cf       	rjmp	.-452    	; 0x258 <main+0x52>
				 to 00:00:00. 
				 */
				int fourCntH1 = 0;
				
				
				for (h10 = 0; h10 <= 2; h10++) {
 41c:	08 94       	sec
 41e:	e1 1c       	adc	r14, r1
 420:	f1 1c       	adc	r15, r1
 422:	93 e0       	ldi	r25, 0x03	; 3
 424:	e9 16       	cp	r14, r25
 426:	f1 04       	cpc	r15, r1
 428:	24 f0       	brlt	.+8      	; 0x432 <main+0x22c>
 42a:	ee 24       	eor	r14, r14
 42c:	ff 24       	eor	r15, r15
 42e:	1c 8a       	std	Y+20, r1	; 0x14
 430:	1b 8a       	std	Y+19, r1	; 0x13
 432:	00 e0       	ldi	r16, 0x00	; 0
 434:	10 e0       	ldi	r17, 0x00	; 0
 436:	18 cf       	rjmp	.-464    	; 0x268 <main+0x62>

00000438 <USART_init>:
 438:	90 93 cd 00 	sts	0x00CD, r25
 43c:	80 93 cc 00 	sts	0x00CC, r24
 440:	88 e1       	ldi	r24, 0x18	; 24
 442:	80 93 c9 00 	sts	0x00C9, r24
 446:	86 e0       	ldi	r24, 0x06	; 6
 448:	80 93 ca 00 	sts	0x00CA, r24
 44c:	08 95       	ret

0000044e <USART_transmit>:
 44e:	90 91 c8 00 	lds	r25, 0x00C8
 452:	95 ff       	sbrs	r25, 5
 454:	fc cf       	rjmp	.-8      	; 0x44e <USART_transmit>
 456:	80 93 ce 00 	sts	0x00CE, r24
 45a:	08 95       	ret

0000045c <USART_available>:
 45c:	80 91 c8 00 	lds	r24, 0x00C8
 460:	80 78       	andi	r24, 0x80	; 128
 462:	08 95       	ret

00000464 <USART_receive>:
 464:	80 91 c8 00 	lds	r24, 0x00C8
 468:	87 ff       	sbrs	r24, 7
 46a:	fc cf       	rjmp	.-8      	; 0x464 <USART_receive>
 46c:	80 91 ce 00 	lds	r24, 0x00CE
 470:	08 95       	ret

00000472 <USART_send_string>:
 472:	ef 92       	push	r14
 474:	ff 92       	push	r15
 476:	cf 93       	push	r28
 478:	df 93       	push	r29
 47a:	e8 2e       	mov	r14, r24
 47c:	e7 01       	movw	r28, r14
 47e:	7e 01       	movw	r14, r28
 480:	f9 2e       	mov	r15, r25
 482:	e7 01       	movw	r28, r14
 484:	01 c0       	rjmp	.+2      	; 0x488 <USART_send_string+0x16>
 486:	e3 df       	rcall	.-58     	; 0x44e <USART_transmit>
 488:	89 91       	ld	r24, Y+
 48a:	88 23       	and	r24, r24
 48c:	e1 f7       	brne	.-8      	; 0x486 <USART_send_string+0x14>
 48e:	df 91       	pop	r29
 490:	cf 91       	pop	r28
 492:	ff 90       	pop	r15
 494:	ef 90       	pop	r14
 496:	08 95       	ret

00000498 <ADC_set_prescaler>:
 498:	ea e7       	ldi	r30, 0x7A	; 122
 49a:	f0 e0       	ldi	r31, 0x00	; 0
 49c:	90 81       	ld	r25, Z
 49e:	98 7f       	andi	r25, 0xF8	; 248
 4a0:	90 83       	st	Z, r25
 4a2:	90 81       	ld	r25, Z
 4a4:	87 70       	andi	r24, 0x07	; 7
 4a6:	89 2b       	or	r24, r25
 4a8:	80 83       	st	Z, r24
 4aa:	08 95       	ret

000004ac <ADC_set_free_running>:
 4ac:	88 23       	and	r24, r24
 4ae:	99 f0       	breq	.+38     	; 0x4d6 <ADC_set_free_running+0x2a>
 4b0:	80 91 7b 00 	lds	r24, 0x007B
 4b4:	8b 7f       	andi	r24, 0xFB	; 251
 4b6:	80 93 7b 00 	sts	0x007B, r24
 4ba:	80 91 7b 00 	lds	r24, 0x007B
 4be:	8d 7f       	andi	r24, 0xFD	; 253
 4c0:	80 93 7b 00 	sts	0x007B, r24
 4c4:	80 91 7b 00 	lds	r24, 0x007B
 4c8:	8e 7f       	andi	r24, 0xFE	; 254
 4ca:	80 93 7b 00 	sts	0x007B, r24
 4ce:	80 91 7a 00 	lds	r24, 0x007A
 4d2:	80 62       	ori	r24, 0x20	; 32
 4d4:	03 c0       	rjmp	.+6      	; 0x4dc <ADC_set_free_running+0x30>
 4d6:	80 91 7a 00 	lds	r24, 0x007A
 4da:	8f 7d       	andi	r24, 0xDF	; 223
 4dc:	80 93 7a 00 	sts	0x007A, r24
 4e0:	08 95       	ret

000004e2 <ADC_enable>:
 4e2:	ea e7       	ldi	r30, 0x7A	; 122
 4e4:	f0 e0       	ldi	r31, 0x00	; 0
 4e6:	80 81       	ld	r24, Z
 4e8:	80 68       	ori	r24, 0x80	; 128
 4ea:	80 83       	st	Z, r24
 4ec:	08 95       	ret

000004ee <ADC_start>:
 4ee:	ea e7       	ldi	r30, 0x7A	; 122
 4f0:	f0 e0       	ldi	r31, 0x00	; 0
 4f2:	80 81       	ld	r24, Z
 4f4:	80 64       	ori	r24, 0x40	; 64
 4f6:	80 83       	st	Z, r24
 4f8:	08 95       	ret

000004fa <ADC_finish>:
 4fa:	ea e7       	ldi	r30, 0x7A	; 122
 4fc:	f0 e0       	ldi	r31, 0x00	; 0
 4fe:	80 81       	ld	r24, Z
 500:	80 61       	ori	r24, 0x10	; 16
 502:	80 83       	st	Z, r24
 504:	08 95       	ret

00000506 <ADC_done>:
 506:	90 91 7a 00 	lds	r25, 0x007A
 50a:	81 e0       	ldi	r24, 0x01	; 1
 50c:	94 ff       	sbrs	r25, 4
 50e:	80 e0       	ldi	r24, 0x00	; 0
 510:	08 95       	ret

00000512 <ADC_set_reference>:
 512:	90 91 7c 00 	lds	r25, 0x007C
 516:	9f 73       	andi	r25, 0x3F	; 63
 518:	90 93 7c 00 	sts	0x007C, r25
 51c:	90 91 7c 00 	lds	r25, 0x007C
 520:	80 7c       	andi	r24, 0xC0	; 192
 522:	89 2b       	or	r24, r25
 524:	80 93 7c 00 	sts	0x007C, r24
 528:	e2 df       	rcall	.-60     	; 0x4ee <ADC_start>
 52a:	ed df       	rcall	.-38     	; 0x506 <ADC_done>
 52c:	88 23       	and	r24, r24
 52e:	e9 f3       	breq	.-6      	; 0x52a <ADC_set_reference+0x18>
 530:	e4 cf       	rjmp	.-56     	; 0x4fa <ADC_finish>

00000532 <setup_ADC>:
 532:	df 93       	push	r29
 534:	cf 93       	push	r28
 536:	0f 92       	push	r0
 538:	cd b7       	in	r28, 0x3d	; 61
 53a:	de b7       	in	r29, 0x3e	; 62
 53c:	69 83       	std	Y+1, r22	; 0x01
 53e:	ac df       	rcall	.-168    	; 0x498 <ADC_set_prescaler>
 540:	69 81       	ldd	r22, Y+1	; 0x01
 542:	86 2f       	mov	r24, r22
 544:	b3 df       	rcall	.-154    	; 0x4ac <ADC_set_free_running>
 546:	0f 90       	pop	r0
 548:	cf 91       	pop	r28
 54a:	df 91       	pop	r29
 54c:	08 95       	ret

0000054e <set_array_blue>:
 54e:	1e bc       	out	0x2e, r1	; 46
 550:	0d b4       	in	r0, 0x2d	; 45
 552:	07 fe       	sbrs	r0, 7
 554:	fd cf       	rjmp	.-6      	; 0x550 <set_array_blue+0x2>
 556:	1e bc       	out	0x2e, r1	; 46
 558:	0d b4       	in	r0, 0x2d	; 45
 55a:	07 fe       	sbrs	r0, 7
 55c:	fd cf       	rjmp	.-6      	; 0x558 <set_array_blue+0xa>
 55e:	8e bd       	out	0x2e, r24	; 46
 560:	0d b4       	in	r0, 0x2d	; 45
 562:	07 fe       	sbrs	r0, 7
 564:	fd cf       	rjmp	.-6      	; 0x560 <set_array_blue+0x12>
 566:	2f 9a       	sbi	0x05, 7	; 5
 568:	8a ef       	ldi	r24, 0xFA	; 250
 56a:	90 e0       	ldi	r25, 0x00	; 0
 56c:	01 97       	sbiw	r24, 0x01	; 1
 56e:	f1 f7       	brne	.-4      	; 0x56c <set_array_blue+0x1e>
 570:	2f 98       	cbi	0x05, 7	; 5
 572:	08 95       	ret

00000574 <clear_array>:
 574:	08 95       	ret

00000576 <__udivmodhi4>:
 576:	aa 1b       	sub	r26, r26
 578:	bb 1b       	sub	r27, r27
 57a:	51 e1       	ldi	r21, 0x11	; 17
 57c:	07 c0       	rjmp	.+14     	; 0x58c <__udivmodhi4_ep>

0000057e <__udivmodhi4_loop>:
 57e:	aa 1f       	adc	r26, r26
 580:	bb 1f       	adc	r27, r27
 582:	a6 17       	cp	r26, r22
 584:	b7 07       	cpc	r27, r23
 586:	10 f0       	brcs	.+4      	; 0x58c <__udivmodhi4_ep>
 588:	a6 1b       	sub	r26, r22
 58a:	b7 0b       	sbc	r27, r23

0000058c <__udivmodhi4_ep>:
 58c:	88 1f       	adc	r24, r24
 58e:	99 1f       	adc	r25, r25
 590:	5a 95       	dec	r21
 592:	a9 f7       	brne	.-22     	; 0x57e <__udivmodhi4_loop>
 594:	80 95       	com	r24
 596:	90 95       	com	r25
 598:	bc 01       	movw	r22, r24
 59a:	cd 01       	movw	r24, r26
 59c:	08 95       	ret

0000059e <__divmodhi4>:
 59e:	97 fb       	bst	r25, 7
 5a0:	09 2e       	mov	r0, r25
 5a2:	07 26       	eor	r0, r23
 5a4:	0a d0       	rcall	.+20     	; 0x5ba <__divmodhi4_neg1>
 5a6:	77 fd       	sbrc	r23, 7
 5a8:	04 d0       	rcall	.+8      	; 0x5b2 <__divmodhi4_neg2>
 5aa:	e5 df       	rcall	.-54     	; 0x576 <__udivmodhi4>
 5ac:	06 d0       	rcall	.+12     	; 0x5ba <__divmodhi4_neg1>
 5ae:	00 20       	and	r0, r0
 5b0:	1a f4       	brpl	.+6      	; 0x5b8 <__divmodhi4_exit>

000005b2 <__divmodhi4_neg2>:
 5b2:	70 95       	com	r23
 5b4:	61 95       	neg	r22
 5b6:	7f 4f       	sbci	r23, 0xFF	; 255

000005b8 <__divmodhi4_exit>:
 5b8:	08 95       	ret

000005ba <__divmodhi4_neg1>:
 5ba:	f6 f7       	brtc	.-4      	; 0x5b8 <__divmodhi4_exit>
 5bc:	90 95       	com	r25
 5be:	81 95       	neg	r24
 5c0:	9f 4f       	sbci	r25, 0xFF	; 255
 5c2:	08 95       	ret

000005c4 <_exit>:
 5c4:	f8 94       	cli

000005c6 <__stop_program>:
 5c6:	ff cf       	rjmp	.-2      	; 0x5c6 <__stop_program>
