
wunder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00000440  000004b4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000440  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000001d8  00000000  00000000  0000058a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000031a  00000000  00000000  00000762  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000110a  00000000  00000000  00000a7c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006fe  00000000  00000000  00001b86  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000014b7  00000000  00000000  00002284  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000310  00000000  00000000  0000373c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000046a  00000000  00000000  00003a4c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000805  00000000  00000000  00003eb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000258  00000000  00000000  000046bb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
  50               	.LVL3:
  51               	.L4:
  52               	.LSM6:
  53 0002 8091 C800 		lds r24,200
  54 0006 85FF      		sbrs r24,5
  55 0008 00C0      		rjmp .L4
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
  84 0008 9083      		st Z,r25
  85               	.LSM10:
  86 000a 9081      		ld r25,Z
  87 000c 8770      		andi r24,lo8(7)
  88               	.LVL7:
  89 000e 892B      		or r24,r25
   2:	00 00       	nop
  38               	/* frame size = 0 */
  39               	/* epilogue start */
  40               	.LSM3:
  41 0000 0895      		ret
  42               	.LFE7:
  44               		.section	.text.set_array_red,"ax",@progbits
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e0 e4       	ldi	r30, 0x40	; 64
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 3d       	cpi	r26, 0xD6	; 214
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a6 ed       	ldi	r26, 0xD6	; 214
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a6 3d       	cpi	r26, 0xD6	; 214
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	72 d0       	rcall	.+228    	; 0x1b4 <main>
  d0:	b5 c1       	rjmp	.+874    	; 0x43c <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <itoa>:
  d4:	fb 01       	movw	r30, r22
  d6:	9f 01       	movw	r18, r30
  d8:	e8 94       	clt
  da:	42 30       	cpi	r20, 0x02	; 2
  dc:	bc f0       	brlt	.+46     	; 0x10c <itoa+0x38>
  de:	45 32       	cpi	r20, 0x25	; 37
  e0:	ac f4       	brge	.+42     	; 0x10c <itoa+0x38>
  e2:	4a 30       	cpi	r20, 0x0A	; 10
  e4:	29 f4       	brne	.+10     	; 0xf0 <itoa+0x1c>
  e6:	97 fb       	bst	r25, 7
  e8:	1e f4       	brtc	.+6      	; 0xf0 <itoa+0x1c>
  ea:	90 95       	com	r25
  ec:	81 95       	neg	r24
  ee:	9f 4f       	sbci	r25, 0xFF	; 255
  f0:	64 2f       	mov	r22, r20
  f2:	77 27       	eor	r23, r23
  f4:	8f d1       	rcall	.+798    	; 0x414 <__udivmodhi4>
  f6:	80 5d       	subi	r24, 0xD0	; 208
  f8:	8a 33       	cpi	r24, 0x3A	; 58
  fa:	0c f0       	brlt	.+2      	; 0xfe <itoa+0x2a>
  fc:	89 5d       	subi	r24, 0xD9	; 217
  fe:	81 93       	st	Z+, r24
 100:	cb 01       	movw	r24, r22
 102:	00 97       	sbiw	r24, 0x00	; 0
 104:	a9 f7       	brne	.-22     	; 0xf0 <itoa+0x1c>
 106:	16 f4       	brtc	.+4      	; 0x10c <itoa+0x38>
 108:	5d e2       	ldi	r21, 0x2D	; 45
 10a:	51 93       	st	Z+, r21
 10c:	10 82       	st	Z, r1
 10e:	c9 01       	movw	r24, r18
 110:	00 c0       	rjmp	.+0      	; 0x112 <strrev>

00000112 <strrev>:
 112:	dc 01       	movw	r26, r24
 114:	fc 01       	movw	r30, r24
 116:	67 2f       	mov	r22, r23
 118:	71 91       	ld	r23, Z+
 11a:	77 23       	and	r23, r23
 11c:	e1 f7       	brne	.-8      	; 0x116 <strrev+0x4>
 11e:	32 97       	sbiw	r30, 0x02	; 2
 120:	04 c0       	rjmp	.+8      	; 0x12a <strrev+0x18>
 122:	7c 91       	ld	r23, X
 124:	6d 93       	st	X+, r22
 126:	70 83       	st	Z, r23
 128:	62 91       	ld	r22, -Z
 12a:	ae 17       	cp	r26, r30
 12c:	bf 07       	cpc	r27, r31
 12e:	c8 f3       	brcs	.-14     	; 0x122 <strrev+0x10>
 130:	08 95       	ret

00000132 <initialize>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))


void initialize( void )
{
	CPU_PRESCALE(0);
 132:	e1 e6       	ldi	r30, 0x61	; 97
 134:	f0 e0       	ldi	r31, 0x00	; 0
 136:	80 e8       	ldi	r24, 0x80	; 128
 138:	80 83       	st	Z, r24
 13a:	10 82       	st	Z, r1
	
	USART_init(BAUD_RATE);
 13c:	83 e3       	ldi	r24, 0x33	; 51
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	04 d1       	rcall	.+520    	; 0x34a <USART_init>
	USART_send_string('\f');	// Send form feed to clear the terminal.
 142:	8c e0       	ldi	r24, 0x0C	; 12
 144:	90 e0       	ldi	r25, 0x00	; 0
 146:	0c d1       	rcall	.+536    	; 0x360 <USART_send_string>
	USART_send_string("WunderBoard initializing...\r\n");
 148:	80 e0       	ldi	r24, 0x00	; 0
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	09 d1       	rcall	.+530    	; 0x360 <USART_send_string>
	
	USART_send_string("\tSetting ADC prescaler and disabling free running mode...\r\n");
 14e:	8e e1       	ldi	r24, 0x1E	; 30
 150:	91 e0       	ldi	r25, 0x01	; 1
 152:	06 d1       	rcall	.+524    	; 0x360 <USART_send_string>
	setup_ADC(ADC_PRESCALER_32, FALSE);
 154:	85 e0       	ldi	r24, 0x05	; 5
 156:	60 e0       	ldi	r22, 0x00	; 0
 158:	31 d1       	rcall	.+610    	; 0x3bc <setup_ADC>
	
	USART_send_string("\tEnabling ADC...\r\n");
 15a:	8a e5       	ldi	r24, 0x5A	; 90
 15c:	91 e0       	ldi	r25, 0x01	; 1
 15e:	00 d1       	rcall	.+512    	; 0x360 <USART_send_string>
	ADC_enable();
 160:	27 d1       	rcall	.+590    	; 0x3b0 <ADC_enable>
	
	USART_send_string("\tSetting ADC reference to Vcc...\r\n");
 162:	8d e6       	ldi	r24, 0x6D	; 109
 164:	91 e0       	ldi	r25, 0x01	; 1
 166:	fc d0       	rcall	.+504    	; 0x360 <USART_send_string>
	ADC_set_reference(ADC_REF_VCC);
 168:	80 e4       	ldi	r24, 0x40	; 64
 16a:	08 d1       	rcall	.+528    	; 0x37c <ADC_set_reference>
	
	// Configure IO //
	USART_send_string("\tConfiguring IO...\r\n");
 16c:	80 e9       	ldi	r24, 0x90	; 144
 16e:	91 e0       	ldi	r25, 0x01	; 1
 170:	f7 d0       	rcall	.+494    	; 0x360 <USART_send_string>
	//DDRx corresponds to PORTx/PINx, dependng on direction of data flow -- PORT for output, PIN for input
	DDRA = 0x00;	// Buttons and switches
 172:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 174:	87 ee       	ldi	r24, 0xE7	; 231
 176:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 178:	8f ef       	ldi	r24, 0xFF	; 255
 17a:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// LED Column
 17c:	87 e4       	ldi	r24, 0x47	; 71
 17e:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 180:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 182:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 184:	81 e0       	ldi	r24, 0x01	; 1
 186:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x81;
 188:	81 e8       	ldi	r24, 0x81	; 129
 18a:	88 b9       	out	0x08, r24	; 8
	PORTE = 0x00;
 18c:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 18e:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 190:	80 e4       	ldi	r24, 0x40	; 64
 192:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 196:	8b e0       	ldi	r24, 0x0B	; 11
 198:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 19c:	88 e1       	ldi	r24, 0x18	; 24
 19e:	90 e0       	ldi	r25, 0x00	; 0
 1a0:	90 93 89 00 	sts	0x0089, r25
 1a4:	80 93 88 00 	sts	0x0088, r24

	USART_send_string("\tSetting SPI\r\n");
 1a8:	85 ea       	ldi	r24, 0xA5	; 165
 1aa:	91 e0       	ldi	r25, 0x01	; 1
 1ac:	d9 d0       	rcall	.+434    	; 0x360 <USART_send_string>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 1ae:	81 e5       	ldi	r24, 0x51	; 81
 1b0:	8c bd       	out	0x2c, r24	; 44

}
 1b2:	08 95       	ret

000001b4 <main>:
 *******************		MAIN		*********************
 ***********************************************************/


int main(int argc, char **argv)
{	
 1b4:	af 92       	push	r10
 1b6:	bf 92       	push	r11
 1b8:	cf 92       	push	r12
 1ba:	df 92       	push	r13
 1bc:	ef 92       	push	r14
 1be:	ff 92       	push	r15
 1c0:	0f 93       	push	r16
 1c2:	1f 93       	push	r17
 1c4:	df 93       	push	r29
 1c6:	cf 93       	push	r28
 1c8:	cd b7       	in	r28, 0x3d	; 61
 1ca:	de b7       	in	r29, 0x3e	; 62
 1cc:	cf 5f       	subi	r28, 0xFF	; 255
 1ce:	d0 40       	sbci	r29, 0x00	; 0
 1d0:	0f b6       	in	r0, 0x3f	; 63
 1d2:	f8 94       	cli
 1d4:	de bf       	out	0x3e, r29	; 62
 1d6:	0f be       	out	0x3f, r0	; 63
 1d8:	cd bf       	out	0x3d, r28	; 61
	initialize();
 1da:	ab df       	rcall	.-170    	; 0x132 <initialize>
	clear_array();
 1dc:	18 d1       	rcall	.+560    	; 0x40e <clear_array>
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 1de:	38 ec       	ldi	r19, 0xC8	; 200
 1e0:	a3 2e       	mov	r10, r19
 1e2:	b1 2c       	mov	r11, r1
				led_red(7-i, 7-i);
				led_red(7-i, i);
				_delay_ms(0.1);

				USART_send_string("\t\r\nX: ");
				USART_send_string(itoa(7-i, str, 10));
 1e4:	6e 01       	movw	r12, r28
 1e6:	08 94       	sec
 1e8:	c1 1c       	adc	r12, r1
 1ea:	d1 1c       	adc	r13, r1
	
	while(1) {
	
		
	
		PORTC = PINA;
 1ec:	80 b1       	in	r24, 0x00	; 0
 1ee:	88 b9       	out	0x08, r24	; 8
		//Creating the "X":
		int i, j, k;
			
		//IF no button pressed, light up as green
		if (PORTC != 0b00000001) {
 1f0:	88 b1       	in	r24, 0x08	; 8
 1f2:	81 30       	cpi	r24, 0x01	; 1
 1f4:	09 f4       	brne	.+2      	; 0x1f8 <main+0x44>
 1f6:	36 c0       	rjmp	.+108    	; 0x264 <main+0xb0>
 1f8:	27 e0       	ldi	r18, 0x07	; 7
 1fa:	e2 2e       	mov	r14, r18
 1fc:	f1 2c       	mov	r15, r1
 1fe:	00 e0       	ldi	r16, 0x00	; 0
 200:	10 e0       	ldi	r17, 0x00	; 0
			//clear_array();
			for (i = 7; i >= 0; i--) {
				PORTE = i;
 202:	ee b8       	out	0x0e, r14	; 14
				led_red(7-i, 7-i);
 204:	80 2f       	mov	r24, r16
 206:	60 2f       	mov	r22, r16
 208:	03 d1       	rcall	.+518    	; 0x410 <led_red>
				led_red(7-i, i);
 20a:	80 2f       	mov	r24, r16
 20c:	6e 2d       	mov	r22, r14
 20e:	00 d1       	rcall	.+512    	; 0x410 <led_red>
 210:	c5 01       	movw	r24, r10
 212:	01 97       	sbiw	r24, 0x01	; 1
 214:	f1 f7       	brne	.-4      	; 0x212 <main+0x5e>
				_delay_ms(0.1);

				USART_send_string("\t\r\nX: ");
 216:	84 eb       	ldi	r24, 0xB4	; 180
 218:	91 e0       	ldi	r25, 0x01	; 1
 21a:	a2 d0       	rcall	.+324    	; 0x360 <USART_send_string>
				USART_send_string(itoa(7-i, str, 10));
 21c:	c8 01       	movw	r24, r16
 21e:	b6 01       	movw	r22, r12
 220:	4a e0       	ldi	r20, 0x0A	; 10
 222:	50 e0       	ldi	r21, 0x00	; 0
 224:	57 df       	rcall	.-338    	; 0xd4 <itoa>
 226:	9c d0       	rcall	.+312    	; 0x360 <USART_send_string>
				USART_send_string("\t\r\nY(top): ");
 228:	8b eb       	ldi	r24, 0xBB	; 187
 22a:	91 e0       	ldi	r25, 0x01	; 1
 22c:	99 d0       	rcall	.+306    	; 0x360 <USART_send_string>
				USART_send_string(itoa(7-i, str, 10));
 22e:	c8 01       	movw	r24, r16
 230:	b6 01       	movw	r22, r12
 232:	4a e0       	ldi	r20, 0x0A	; 10
 234:	50 e0       	ldi	r21, 0x00	; 0
 236:	4e df       	rcall	.-356    	; 0xd4 <itoa>
 238:	93 d0       	rcall	.+294    	; 0x360 <USART_send_string>
				USART_send_string("\t\r\nY(bottom): ");
 23a:	87 ec       	ldi	r24, 0xC7	; 199
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	90 d0       	rcall	.+288    	; 0x360 <USART_send_string>
				USART_send_string(itoa(i, str, 10));
 240:	c7 01       	movw	r24, r14
 242:	b6 01       	movw	r22, r12
 244:	4a e0       	ldi	r20, 0x0A	; 10
 246:	50 e0       	ldi	r21, 0x00	; 0
 248:	45 df       	rcall	.-374    	; 0xd4 <itoa>
 24a:	8a d0       	rcall	.+276    	; 0x360 <USART_send_string>
				
				
				set_array_green(0);
 24c:	80 e0       	ldi	r24, 0x00	; 0
 24e:	dc d0       	rcall	.+440    	; 0x408 <set_array_green>
		int i, j, k;
			
		//IF no button pressed, light up as green
		if (PORTC != 0b00000001) {
			//clear_array();
			for (i = 7; i >= 0; i--) {
 250:	08 94       	sec
 252:	e1 08       	sbc	r14, r1
 254:	f1 08       	sbc	r15, r1
 256:	0f 5f       	subi	r16, 0xFF	; 255
 258:	1f 4f       	sbci	r17, 0xFF	; 255
 25a:	8f ef       	ldi	r24, 0xFF	; 255
 25c:	e8 16       	cp	r14, r24
 25e:	8f ef       	ldi	r24, 0xFF	; 255
 260:	f8 06       	cpc	r15, r24
 262:	79 f6       	brne	.-98     	; 0x202 <main+0x4e>
				
			}
		}
		
		//IF button 1 is pressed, light up as red
		if (PORTC & 0b00000010) {
 264:	41 9b       	sbis	0x08, 1	; 8
 266:	37 c0       	rjmp	.+110    	; 0x2d6 <main+0x122>
			clear_array();
 268:	d2 d0       	rcall	.+420    	; 0x40e <clear_array>
 26a:	97 e0       	ldi	r25, 0x07	; 7
 26c:	e9 2e       	mov	r14, r25
 26e:	f1 2c       	mov	r15, r1
 270:	00 e0       	ldi	r16, 0x00	; 0
 272:	10 e0       	ldi	r17, 0x00	; 0
			for (i = 7; i >= 0; i--) {
				PORTE = i;
 274:	ee b8       	out	0x0e, r14	; 14
				led_red(7-i, 7-i);
 276:	80 2f       	mov	r24, r16
 278:	60 2f       	mov	r22, r16
 27a:	ca d0       	rcall	.+404    	; 0x410 <led_red>
				led_red(7-i, i);
 27c:	80 2f       	mov	r24, r16
 27e:	6e 2d       	mov	r22, r14
 280:	c7 d0       	rcall	.+398    	; 0x410 <led_red>
 282:	c5 01       	movw	r24, r10
 284:	01 97       	sbiw	r24, 0x01	; 1
 286:	f1 f7       	brne	.-4      	; 0x284 <main+0xd0>
				_delay_ms(0.1);
				
				
				USART_send_string("\t\r\nX: ");
 288:	84 eb       	ldi	r24, 0xB4	; 180
 28a:	91 e0       	ldi	r25, 0x01	; 1
 28c:	69 d0       	rcall	.+210    	; 0x360 <USART_send_string>
				USART_send_string(itoa(7-i, str, 10));
 28e:	c8 01       	movw	r24, r16
 290:	b6 01       	movw	r22, r12
 292:	4a e0       	ldi	r20, 0x0A	; 10
 294:	50 e0       	ldi	r21, 0x00	; 0
 296:	1e df       	rcall	.-452    	; 0xd4 <itoa>
 298:	63 d0       	rcall	.+198    	; 0x360 <USART_send_string>
				USART_send_string("\t\r\nY(top): ");
 29a:	8b eb       	ldi	r24, 0xBB	; 187
 29c:	91 e0       	ldi	r25, 0x01	; 1
 29e:	60 d0       	rcall	.+192    	; 0x360 <USART_send_string>
				USART_send_string(itoa(7-i, str, 10));
 2a0:	c8 01       	movw	r24, r16
 2a2:	b6 01       	movw	r22, r12
 2a4:	4a e0       	ldi	r20, 0x0A	; 10
 2a6:	50 e0       	ldi	r21, 0x00	; 0
 2a8:	15 df       	rcall	.-470    	; 0xd4 <itoa>
 2aa:	5a d0       	rcall	.+180    	; 0x360 <USART_send_string>
				USART_send_string("\t\r\nY(bottom): ");
 2ac:	87 ec       	ldi	r24, 0xC7	; 199
 2ae:	91 e0       	ldi	r25, 0x01	; 1
 2b0:	57 d0       	rcall	.+174    	; 0x360 <USART_send_string>
				USART_send_string(itoa(i, str, 10));
 2b2:	c7 01       	movw	r24, r14
 2b4:	b6 01       	movw	r22, r12
 2b6:	4a e0       	ldi	r20, 0x0A	; 10
 2b8:	50 e0       	ldi	r21, 0x00	; 0
 2ba:	0c df       	rcall	.-488    	; 0xd4 <itoa>
 2bc:	51 d0       	rcall	.+162    	; 0x360 <USART_send_string>
				
				
				set_array_red(0);
 2be:	80 e0       	ldi	r24, 0x00	; 0
 2c0:	a5 d0       	rcall	.+330    	; 0x40c <set_array_red>
		}
		
		//IF button 1 is pressed, light up as red
		if (PORTC & 0b00000010) {
			clear_array();
			for (i = 7; i >= 0; i--) {
 2c2:	08 94       	sec
 2c4:	e1 08       	sbc	r14, r1
 2c6:	f1 08       	sbc	r15, r1
 2c8:	0f 5f       	subi	r16, 0xFF	; 255
 2ca:	1f 4f       	sbci	r17, 0xFF	; 255
 2cc:	8f ef       	ldi	r24, 0xFF	; 255
 2ce:	e8 16       	cp	r14, r24
 2d0:	8f ef       	ldi	r24, 0xFF	; 255
 2d2:	f8 06       	cpc	r15, r24
 2d4:	79 f6       	brne	.-98     	; 0x274 <main+0xc0>
				
			}
		}
		
		//IF button 5 is pressed, light up as blue.
		if (PORTC & 0b00100000) {
 2d6:	45 9b       	sbis	0x08, 5	; 8
 2d8:	89 cf       	rjmp	.-238    	; 0x1ec <main+0x38>
			clear_array();
 2da:	99 d0       	rcall	.+306    	; 0x40e <clear_array>
 2dc:	87 e0       	ldi	r24, 0x07	; 7
 2de:	e8 2e       	mov	r14, r24
 2e0:	f1 2c       	mov	r15, r1
 2e2:	00 e0       	ldi	r16, 0x00	; 0
 2e4:	10 e0       	ldi	r17, 0x00	; 0
			for (i = 7; i >= 0; i--) {
				PORTE = i;
 2e6:	ee b8       	out	0x0e, r14	; 14
				led_blue(7-i, 7-i);
 2e8:	80 2f       	mov	r24, r16
 2ea:	60 2f       	mov	r22, r16
 2ec:	92 d0       	rcall	.+292    	; 0x412 <led_blue>
				led_blue(7-i, i);
 2ee:	80 2f       	mov	r24, r16
 2f0:	6e 2d       	mov	r22, r14
 2f2:	8f d0       	rcall	.+286    	; 0x412 <led_blue>
 2f4:	c5 01       	movw	r24, r10
 2f6:	01 97       	sbiw	r24, 0x01	; 1
 2f8:	f1 f7       	brne	.-4      	; 0x2f6 <main+0x142>
				_delay_ms(0.1);
				
				
				USART_send_string("\t\r\nX: ");
 2fa:	84 eb       	ldi	r24, 0xB4	; 180
 2fc:	91 e0       	ldi	r25, 0x01	; 1
 2fe:	30 d0       	rcall	.+96     	; 0x360 <USART_send_string>
				USART_send_string(itoa(7-i, str, 10));
 300:	c8 01       	movw	r24, r16
 302:	b6 01       	movw	r22, r12
 304:	4a e0       	ldi	r20, 0x0A	; 10
 306:	50 e0       	ldi	r21, 0x00	; 0
 308:	e5 de       	rcall	.-566    	; 0xd4 <itoa>
 30a:	2a d0       	rcall	.+84     	; 0x360 <USART_send_string>
				USART_send_string("\t\r\nY(top): ");
 30c:	8b eb       	ldi	r24, 0xBB	; 187
 30e:	91 e0       	ldi	r25, 0x01	; 1
 310:	27 d0       	rcall	.+78     	; 0x360 <USART_send_string>
				USART_send_string(itoa(7-i, str, 10));
 312:	c8 01       	movw	r24, r16
 314:	b6 01       	movw	r22, r12
 316:	4a e0       	ldi	r20, 0x0A	; 10
 318:	50 e0       	ldi	r21, 0x00	; 0
 31a:	dc de       	rcall	.-584    	; 0xd4 <itoa>
 31c:	21 d0       	rcall	.+66     	; 0x360 <USART_send_string>
				USART_send_string("\t\r\nY(bottom): ");
 31e:	87 ec       	ldi	r24, 0xC7	; 199
 320:	91 e0       	ldi	r25, 0x01	; 1
 322:	1e d0       	rcall	.+60     	; 0x360 <USART_send_string>
				USART_send_string(itoa(i, str, 10));
 324:	c7 01       	movw	r24, r14
 326:	b6 01       	movw	r22, r12
 328:	4a e0       	ldi	r20, 0x0A	; 10
 32a:	50 e0       	ldi	r21, 0x00	; 0
 32c:	d3 de       	rcall	.-602    	; 0xd4 <itoa>
 32e:	18 d0       	rcall	.+48     	; 0x360 <USART_send_string>
				
				
				set_array_blue(0);
 330:	80 e0       	ldi	r24, 0x00	; 0
 332:	6b d0       	rcall	.+214    	; 0x40a <set_array_blue>
		}
		
		//IF button 5 is pressed, light up as blue.
		if (PORTC & 0b00100000) {
			clear_array();
			for (i = 7; i >= 0; i--) {
 334:	08 94       	sec
 336:	e1 08       	sbc	r14, r1
 338:	f1 08       	sbc	r15, r1
 33a:	0f 5f       	subi	r16, 0xFF	; 255
 33c:	1f 4f       	sbci	r17, 0xFF	; 255
 33e:	8f ef       	ldi	r24, 0xFF	; 255
 340:	e8 16       	cp	r14, r24
 342:	8f ef       	ldi	r24, 0xFF	; 255
 344:	f8 06       	cpc	r15, r24
 346:	79 f6       	brne	.-98     	; 0x2e6 <main+0x132>
 348:	51 cf       	rjmp	.-350    	; 0x1ec <main+0x38>

0000034a <USART_init>:
  38               	.LFE2:
  40               		.section	.text.USART_transmit,"ax",@progbits
  41               	.global	USART_transmit
  43               	USART_transmit:
  44               	.LFB3:
  45               	.LSM5:
 34a:	90 93 cd 00 	sts	0x00CD, r25
 34e:	80 93 cc 00 	sts	0x00CC, r24
  46               	.LVL2:
  47               	/* prologue: function */
  48               	/* frame size = 0 */
 352:	88 e1       	ldi	r24, 0x18	; 24
 354:	80 93 c9 00 	sts	0x00C9, r24
  49 0000 982F      		mov r25,r24
  50               	.LVL3:
  51               	.L4:
 358:	86 e0       	ldi	r24, 0x06	; 6
 35a:	80 93 ca 00 	sts	0x00CA, r24
  52               	.LSM6:
 35e:	08 95       	ret

00000360 <USART_send_string>:
  71               	.LSM10:
  72 0000 8091 C800 		lds r24,200
  73               	.LSM11:
  74 0004 8078      		andi r24,lo8(-128)
  75               	/* epilogue start */
  76 0006 0895      		ret
 360:	e8 2f       	mov	r30, r24
 362:	f9 2f       	mov	r31, r25
 364:	07 c0       	rjmp	.+14     	; 0x374 <USART_send_string+0x14>
  51               	.L4:
  52               	.LSM6:
  53 0002 8091 C800 		lds r24,200
  54 0006 85FF      		sbrs r24,5
  55 0008 00C0      		rjmp .L4
  56               	.LSM7:
 366:	80 91 c8 00 	lds	r24, 0x00C8
 36a:	85 ff       	sbrs	r24, 5
 36c:	fc cf       	rjmp	.-8      	; 0x366 <USART_send_string+0x6>
  57 000a 9093 CE00 		sts 206,r25
  58               	/* epilogue start */
 36e:	90 93 ce 00 	sts	0x00CE, r25
  74 0004 8078      		andi r24,lo8(-128)
  75               	/* epilogue start */
  76 0006 0895      		ret
  77               	.LFE4:
  79               		.section	.text.USART_receive,"ax",@progbits
  80               	.global	USART_receive
 372:	31 96       	adiw	r30, 0x01	; 1
  72 0000 8091 C800 		lds r24,200
  73               	.LSM11:
  74 0004 8078      		andi r24,lo8(-128)
  75               	/* epilogue start */
  76 0006 0895      		ret
  77               	.LFE4:
 374:	90 81       	ld	r25, Z
 376:	99 23       	and	r25, r25
 378:	b1 f7       	brne	.-20     	; 0x366 <USART_send_string+0x6>
  79               		.section	.text.USART_receive,"ax",@progbits
  80               	.global	USART_receive
  82               	USART_receive:
  83               	.LFB5:
 37a:	08 95       	ret

0000037c <ADC_set_reference>:
  90 0010 8083      		st Z,r24
  91               	/* epilogue start */
  92               	.LSM11:
  93 0012 0895      		ret
  94               	.LFE4:
  96               		.section	.text.ADC_set_free_running,"ax",@progbits
 37c:	90 91 7c 00 	lds	r25, 0x007C
 380:	9f 73       	andi	r25, 0x3F	; 63
 382:	90 93 7c 00 	sts	0x007C, r25
  97               	.global	ADC_set_free_running
 386:	90 91 7c 00 	lds	r25, 0x007C
 38a:	80 7c       	andi	r24, 0xC0	; 192
 38c:	89 2b       	or	r24, r25
 38e:	80 93 7c 00 	sts	0x007C, r24
 125               	.LVL10:
 126               	.L11:
 127               	.LSM18:
 128 002a 8091 7A00 		lds r24,122
 129               	.LVL11:
 130 002e 8F7D      		andi r24,lo8(-33)
 392:	80 91 7a 00 	lds	r24, 0x007A
 396:	80 64       	ori	r24, 0x40	; 64
 398:	80 93 7a 00 	sts	0x007A, r24
 136               		.section	.text.ADC_set_reference,"ax",@progbits
 137               	.global	ADC_set_reference
 139               	ADC_set_reference:
 140               	.LFB6:
 141               	.LSM19:
 142               	.LVL12:
 39c:	80 91 7a 00 	lds	r24, 0x007A
  97               	.global	ADC_set_free_running
  99               	ADC_set_free_running:
 100               	.LFB5:
 101               	.LSM12:
 102               	.LVL8:
 103               	/* prologue: function */
 3a0:	84 ff       	sbrs	r24, 4
 3a2:	fc cf       	rjmp	.-8      	; 0x39c <ADC_set_reference+0x20>
 130 002e 8F7D      		andi r24,lo8(-33)
 131               	.L14:
 132 0030 8093 7A00 		sts 122,r24
 133 0034 0895      		ret
 134               	.LFE5:
 136               		.section	.text.ADC_set_reference,"ax",@progbits
 3a4:	80 91 7a 00 	lds	r24, 0x007A
 3a8:	80 61       	ori	r24, 0x10	; 16
 3aa:	80 93 7a 00 	sts	0x007A, r24
 101               	.LSM12:
 102               	.LVL8:
 103               	/* prologue: function */
 104               	/* frame size = 0 */
 105               	.LSM13:
 106 0000 8823      		tst r24
 3ae:	08 95       	ret

000003b0 <ADC_enable>:
 115 0012 8D7F      		andi r24,lo8(-3)
 116 0014 8093 7B00 		sts 123,r24
 117               	.LSM16:
 118 0018 8091 7B00 		lds r24,123
 119 001c 8E7F      		andi r24,lo8(-2)
 120 001e 8093 7B00 		sts 123,r24
 3b0:	ea e7       	ldi	r30, 0x7A	; 122
 3b2:	f0 e0       	ldi	r31, 0x00	; 0
 3b4:	80 81       	ld	r24, Z
 3b6:	80 68       	ori	r24, 0x80	; 128
 3b8:	80 83       	st	Z, r24
 121               	.LSM17:
 3ba:	08 95       	ret

000003bc <setup_ADC>:
  65               	.L7:
  66 0012 8093 7C00 		sts 124,r24
  67 0016 0895      		ret
  68               	.LFE3:
  70               		.section	.text.ADC_set_prescaler,"ax",@progbits
  71               	.global	ADC_set_prescaler
 3bc:	90 91 7a 00 	lds	r25, 0x007A
 3c0:	98 7f       	andi	r25, 0xF8	; 248
 3c2:	90 93 7a 00 	sts	0x007A, r25
  73               	ADC_set_prescaler:
 3c6:	90 91 7a 00 	lds	r25, 0x007A
 3ca:	87 70       	andi	r24, 0x07	; 7
 3cc:	89 2b       	or	r24, r25
 3ce:	80 93 7a 00 	sts	0x007A, r24
  74               	.LFB4:
  75               	.LSM8:
  76               	.LVL6:
  77               	/* prologue: function */
  78               	/* frame size = 0 */
 3d2:	66 23       	and	r22, r22
 3d4:	99 f0       	breq	.+38     	; 0x3fc <setup_ADC+0x40>
  79               	.LSM9:
  80 0000 EAE7      		ldi r30,lo8(122)
 3d6:	80 91 7b 00 	lds	r24, 0x007B
 3da:	8b 7f       	andi	r24, 0xFB	; 251
 3dc:	80 93 7b 00 	sts	0x007B, r24
  81 0002 F0E0      		ldi r31,hi8(122)
 3e0:	80 91 7b 00 	lds	r24, 0x007B
 3e4:	8d 7f       	andi	r24, 0xFD	; 253
 3e6:	80 93 7b 00 	sts	0x007B, r24
  82 0004 9081      		ld r25,Z
 3ea:	80 91 7b 00 	lds	r24, 0x007B
 3ee:	8e 7f       	andi	r24, 0xFE	; 254
 3f0:	80 93 7b 00 	sts	0x007B, r24
  83 0006 987F      		andi r25,lo8(-8)
  84 0008 9083      		st Z,r25
  85               	.LSM10:
 3f4:	80 91 7a 00 	lds	r24, 0x007A
 3f8:	80 62       	ori	r24, 0x20	; 32
 3fa:	03 c0       	rjmp	.+6      	; 0x402 <setup_ADC+0x46>
  86 000a 9081      		ld r25,Z
  87 000c 8770      		andi r24,lo8(7)
  88               	.LVL7:
  89 000e 892B      		or r24,r25
 3fc:	80 91 7a 00 	lds	r24, 0x007A
 400:	8f 7d       	andi	r24, 0xDF	; 223
 402:	80 93 7a 00 	sts	0x007A, r24
 406:	08 95       	ret

00000408 <set_array_green>:
  20               	.LFB6:
  21               	.LSM0:
  22               	.LVL0:
  23               	/* prologue: function */
  24               	/* frame size = 0 */
  25               	/* epilogue start */
 408:	08 95       	ret

0000040a <set_array_blue>:
  26               	.LSM1:
  27 0000 0895      		ret
  28               	.LFE6:
  30               		.section	.text.set_array_blue,"ax",@progbits
 40a:	08 95       	ret

0000040c <set_array_red>:
  31               	.global	set_array_blue
  33               	set_array_blue:
  34               	.LFB7:
  35               	.LSM2:
 40c:	08 95       	ret

0000040e <clear_array>:
  36               	.LVL1:
  37               	/* prologue: function */
  38               	/* frame size = 0 */
  39               	/* epilogue start */
  40               	.LSM3:
 40e:	08 95       	ret

00000410 <led_red>:
  54               	.LSM5:
  55 0000 0895      		ret
  56               	.LFE8:
  58               		.section	.text.clear_array,"ax",@progbits
  59               	.global	clear_array
  61               	clear_array:
 410:	08 95       	ret

00000412 <led_blue>:
  64               	/* prologue: function */
  65               	/* frame size = 0 */
  66               	/* epilogue start */
  67               	.LSM7:
  68 0000 0895      		ret
  69               	.LFE9:
 412:	08 95       	ret

00000414 <__udivmodhi4>:
 414:	aa 1b       	sub	r26, r26
 416:	bb 1b       	sub	r27, r27
 418:	51 e1       	ldi	r21, 0x11	; 17
 41a:	07 c0       	rjmp	.+14     	; 0x42a <__udivmodhi4_ep>

0000041c <__udivmodhi4_loop>:
 41c:	aa 1f       	adc	r26, r26
 41e:	bb 1f       	adc	r27, r27
 420:	a6 17       	cp	r26, r22
 422:	b7 07       	cpc	r27, r23
 424:	10 f0       	brcs	.+4      	; 0x42a <__udivmodhi4_ep>
 426:	a6 1b       	sub	r26, r22
 428:	b7 0b       	sbc	r27, r23

0000042a <__udivmodhi4_ep>:
 42a:	88 1f       	adc	r24, r24
 42c:	99 1f       	adc	r25, r25
 42e:	5a 95       	dec	r21
 430:	a9 f7       	brne	.-22     	; 0x41c <__udivmodhi4_loop>
 432:	80 95       	com	r24
 434:	90 95       	com	r25
 436:	bc 01       	movw	r22, r24
 438:	cd 01       	movw	r24, r26
 43a:	08 95       	ret

0000043c <_exit>:
 43c:	f8 94       	cli

0000043e <__stop_program>:
 43e:	ff cf       	rjmp	.-2      	; 0x43e <__stop_program>
