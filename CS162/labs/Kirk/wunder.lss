
wunder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000d6  00800100  00000746  000007da  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000746  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000004  008001d6  008001d6  000008b0  2**0
                  ALLOC
  3 .debug_aranges 00000218  00000000  00000000  000008b0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000036a  00000000  00000000  00000ac8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001271  00000000  00000000  00000e32  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000006c2  00000000  00000000  000020a3  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000177d  00000000  00000000  00002765  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000390  00000000  00000000  00003ee4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000050b  00000000  00000000  00004274  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000de8  00000000  00000000  0000477f  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000218  00000000  00000000  00005567  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_pubtypes 000000f2  00000000  00000000  0000577f  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
        {
            n=(n/b);
            dig++;
        }
    return dig;
}
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e6 e4       	ldi	r30, 0x46	; 70
  ac:	f7 e0       	ldi	r31, 0x07	; 7
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a6 3d       	cpi	r26, 0xD6	; 214
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a6 ed       	ldi	r26, 0xD6	; 214
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	aa 3d       	cpi	r26, 0xDA	; 218
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	73 d1       	rcall	.+742    	; 0x3b6 <main>
  d0:	38 c3       	rjmp	.+1648   	; 0x742 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <malloc>:
  d4:	cf 93       	push	r28
  d6:	df 93       	push	r29
  d8:	bc 01       	movw	r22, r24
  da:	82 30       	cpi	r24, 0x02	; 2
  dc:	91 05       	cpc	r25, r1
  de:	10 f4       	brcc	.+4      	; 0xe4 <malloc+0x10>
  e0:	62 e0       	ldi	r22, 0x02	; 2
  e2:	70 e0       	ldi	r23, 0x00	; 0
  e4:	a0 91 d8 01 	lds	r26, 0x01D8
  e8:	b0 91 d9 01 	lds	r27, 0x01D9
  ec:	ed 01       	movw	r28, r26
  ee:	e0 e0       	ldi	r30, 0x00	; 0
  f0:	f0 e0       	ldi	r31, 0x00	; 0
  f2:	40 e0       	ldi	r20, 0x00	; 0
  f4:	50 e0       	ldi	r21, 0x00	; 0
  f6:	21 c0       	rjmp	.+66     	; 0x13a <malloc+0x66>
  f8:	88 81       	ld	r24, Y
  fa:	99 81       	ldd	r25, Y+1	; 0x01
  fc:	86 17       	cp	r24, r22
  fe:	97 07       	cpc	r25, r23
 100:	69 f4       	brne	.+26     	; 0x11c <malloc+0x48>
 102:	8a 81       	ldd	r24, Y+2	; 0x02
 104:	9b 81       	ldd	r25, Y+3	; 0x03
 106:	30 97       	sbiw	r30, 0x00	; 0
 108:	19 f0       	breq	.+6      	; 0x110 <malloc+0x3c>
 10a:	93 83       	std	Z+3, r25	; 0x03
 10c:	82 83       	std	Z+2, r24	; 0x02
 10e:	04 c0       	rjmp	.+8      	; 0x118 <malloc+0x44>
 110:	90 93 d9 01 	sts	0x01D9, r25
 114:	80 93 d8 01 	sts	0x01D8, r24
 118:	fe 01       	movw	r30, r28
 11a:	34 c0       	rjmp	.+104    	; 0x184 <malloc+0xb0>
 11c:	68 17       	cp	r22, r24
 11e:	79 07       	cpc	r23, r25
 120:	38 f4       	brcc	.+14     	; 0x130 <malloc+0x5c>
 122:	41 15       	cp	r20, r1
 124:	51 05       	cpc	r21, r1
 126:	19 f0       	breq	.+6      	; 0x12e <malloc+0x5a>
 128:	84 17       	cp	r24, r20
 12a:	95 07       	cpc	r25, r21
 12c:	08 f4       	brcc	.+2      	; 0x130 <malloc+0x5c>
 12e:	ac 01       	movw	r20, r24
 130:	fe 01       	movw	r30, r28
 132:	8a 81       	ldd	r24, Y+2	; 0x02
 134:	9b 81       	ldd	r25, Y+3	; 0x03
 136:	9c 01       	movw	r18, r24
 138:	e9 01       	movw	r28, r18
 13a:	20 97       	sbiw	r28, 0x00	; 0
 13c:	e9 f6       	brne	.-70     	; 0xf8 <malloc+0x24>
 13e:	41 15       	cp	r20, r1
 140:	51 05       	cpc	r21, r1
 142:	a9 f1       	breq	.+106    	; 0x1ae <malloc+0xda>
 144:	ca 01       	movw	r24, r20
 146:	86 1b       	sub	r24, r22
 148:	97 0b       	sbc	r25, r23
 14a:	04 97       	sbiw	r24, 0x04	; 4
 14c:	08 f4       	brcc	.+2      	; 0x150 <malloc+0x7c>
 14e:	ba 01       	movw	r22, r20
 150:	e0 e0       	ldi	r30, 0x00	; 0
 152:	f0 e0       	ldi	r31, 0x00	; 0
 154:	2a c0       	rjmp	.+84     	; 0x1aa <malloc+0xd6>
 156:	8d 91       	ld	r24, X+
 158:	9c 91       	ld	r25, X
 15a:	11 97       	sbiw	r26, 0x01	; 1
 15c:	84 17       	cp	r24, r20
 15e:	95 07       	cpc	r25, r21
 160:	f9 f4       	brne	.+62     	; 0x1a0 <malloc+0xcc>
 162:	64 17       	cp	r22, r20
 164:	75 07       	cpc	r23, r21
 166:	81 f4       	brne	.+32     	; 0x188 <malloc+0xb4>
 168:	12 96       	adiw	r26, 0x02	; 2
 16a:	8d 91       	ld	r24, X+
 16c:	9c 91       	ld	r25, X
 16e:	13 97       	sbiw	r26, 0x03	; 3
 170:	30 97       	sbiw	r30, 0x00	; 0
 172:	19 f0       	breq	.+6      	; 0x17a <malloc+0xa6>
 174:	93 83       	std	Z+3, r25	; 0x03
 176:	82 83       	std	Z+2, r24	; 0x02
 178:	04 c0       	rjmp	.+8      	; 0x182 <malloc+0xae>
 17a:	90 93 d9 01 	sts	0x01D9, r25
 17e:	80 93 d8 01 	sts	0x01D8, r24
 182:	fd 01       	movw	r30, r26
 184:	32 96       	adiw	r30, 0x02	; 2
 186:	4f c0       	rjmp	.+158    	; 0x226 <malloc+0x152>
 188:	ca 01       	movw	r24, r20
 18a:	86 1b       	sub	r24, r22
 18c:	97 0b       	sbc	r25, r23
 18e:	fd 01       	movw	r30, r26
 190:	e8 0f       	add	r30, r24
 192:	f9 1f       	adc	r31, r25
 194:	61 93       	st	Z+, r22
 196:	71 93       	st	Z+, r23
 198:	02 97       	sbiw	r24, 0x02	; 2
 19a:	8d 93       	st	X+, r24
 19c:	9c 93       	st	X, r25
 19e:	43 c0       	rjmp	.+134    	; 0x226 <malloc+0x152>
 1a0:	fd 01       	movw	r30, r26
 1a2:	82 81       	ldd	r24, Z+2	; 0x02
 1a4:	93 81       	ldd	r25, Z+3	; 0x03
 1a6:	9c 01       	movw	r18, r24
 1a8:	d9 01       	movw	r26, r18
 1aa:	10 97       	sbiw	r26, 0x00	; 0
 1ac:	a1 f6       	brne	.-88     	; 0x156 <malloc+0x82>
 1ae:	80 91 d6 01 	lds	r24, 0x01D6
 1b2:	90 91 d7 01 	lds	r25, 0x01D7
 1b6:	89 2b       	or	r24, r25
 1b8:	41 f4       	brne	.+16     	; 0x1ca <malloc+0xf6>
 1ba:	80 91 d1 01 	lds	r24, 0x01D1
 1be:	90 91 d2 01 	lds	r25, 0x01D2
 1c2:	90 93 d7 01 	sts	0x01D7, r25
 1c6:	80 93 d6 01 	sts	0x01D6, r24
 1ca:	40 91 d3 01 	lds	r20, 0x01D3
 1ce:	50 91 d4 01 	lds	r21, 0x01D4
 1d2:	41 15       	cp	r20, r1
 1d4:	51 05       	cpc	r21, r1
 1d6:	41 f4       	brne	.+16     	; 0x1e8 <malloc+0x114>
 1d8:	4d b7       	in	r20, 0x3d	; 61
 1da:	5e b7       	in	r21, 0x3e	; 62
 1dc:	80 91 cf 01 	lds	r24, 0x01CF
 1e0:	90 91 d0 01 	lds	r25, 0x01D0
 1e4:	48 1b       	sub	r20, r24
 1e6:	59 0b       	sbc	r21, r25
 1e8:	20 91 d6 01 	lds	r18, 0x01D6
 1ec:	30 91 d7 01 	lds	r19, 0x01D7
 1f0:	24 17       	cp	r18, r20
 1f2:	35 07       	cpc	r19, r21
 1f4:	b0 f4       	brcc	.+44     	; 0x222 <malloc+0x14e>
 1f6:	ca 01       	movw	r24, r20
 1f8:	82 1b       	sub	r24, r18
 1fa:	93 0b       	sbc	r25, r19
 1fc:	86 17       	cp	r24, r22
 1fe:	97 07       	cpc	r25, r23
 200:	80 f0       	brcs	.+32     	; 0x222 <malloc+0x14e>
 202:	ab 01       	movw	r20, r22
 204:	4e 5f       	subi	r20, 0xFE	; 254
 206:	5f 4f       	sbci	r21, 0xFF	; 255
 208:	84 17       	cp	r24, r20
 20a:	95 07       	cpc	r25, r21
 20c:	50 f0       	brcs	.+20     	; 0x222 <malloc+0x14e>
 20e:	42 0f       	add	r20, r18
 210:	53 1f       	adc	r21, r19
 212:	50 93 d7 01 	sts	0x01D7, r21
 216:	40 93 d6 01 	sts	0x01D6, r20
 21a:	f9 01       	movw	r30, r18
 21c:	61 93       	st	Z+, r22
 21e:	71 93       	st	Z+, r23
 220:	02 c0       	rjmp	.+4      	; 0x226 <malloc+0x152>
 222:	e0 e0       	ldi	r30, 0x00	; 0
 224:	f0 e0       	ldi	r31, 0x00	; 0
 226:	cf 01       	movw	r24, r30
 228:	df 91       	pop	r29
 22a:	cf 91       	pop	r28
 22c:	08 95       	ret

0000022e <free>:
 22e:	cf 93       	push	r28
 230:	df 93       	push	r29
 232:	00 97       	sbiw	r24, 0x00	; 0
 234:	09 f4       	brne	.+2      	; 0x238 <free+0xa>
 236:	50 c0       	rjmp	.+160    	; 0x2d8 <free+0xaa>
 238:	ec 01       	movw	r28, r24
 23a:	22 97       	sbiw	r28, 0x02	; 2
 23c:	1b 82       	std	Y+3, r1	; 0x03
 23e:	1a 82       	std	Y+2, r1	; 0x02
 240:	a0 91 d8 01 	lds	r26, 0x01D8
 244:	b0 91 d9 01 	lds	r27, 0x01D9
 248:	10 97       	sbiw	r26, 0x00	; 0
 24a:	09 f1       	breq	.+66     	; 0x28e <free+0x60>
 24c:	40 e0       	ldi	r20, 0x00	; 0
 24e:	50 e0       	ldi	r21, 0x00	; 0
 250:	ac 17       	cp	r26, r28
 252:	bd 07       	cpc	r27, r29
 254:	08 f1       	brcs	.+66     	; 0x298 <free+0x6a>
 256:	bb 83       	std	Y+3, r27	; 0x03
 258:	aa 83       	std	Y+2, r26	; 0x02
 25a:	fe 01       	movw	r30, r28
 25c:	21 91       	ld	r18, Z+
 25e:	31 91       	ld	r19, Z+
 260:	e2 0f       	add	r30, r18
 262:	f3 1f       	adc	r31, r19
 264:	ae 17       	cp	r26, r30
 266:	bf 07       	cpc	r27, r31
 268:	79 f4       	brne	.+30     	; 0x288 <free+0x5a>
 26a:	8d 91       	ld	r24, X+
 26c:	9c 91       	ld	r25, X
 26e:	11 97       	sbiw	r26, 0x01	; 1
 270:	28 0f       	add	r18, r24
 272:	39 1f       	adc	r19, r25
 274:	2e 5f       	subi	r18, 0xFE	; 254
 276:	3f 4f       	sbci	r19, 0xFF	; 255
 278:	39 83       	std	Y+1, r19	; 0x01
 27a:	28 83       	st	Y, r18
 27c:	12 96       	adiw	r26, 0x02	; 2
 27e:	8d 91       	ld	r24, X+
 280:	9c 91       	ld	r25, X
 282:	13 97       	sbiw	r26, 0x03	; 3
 284:	9b 83       	std	Y+3, r25	; 0x03
 286:	8a 83       	std	Y+2, r24	; 0x02
 288:	41 15       	cp	r20, r1
 28a:	51 05       	cpc	r21, r1
 28c:	71 f4       	brne	.+28     	; 0x2aa <free+0x7c>
 28e:	d0 93 d9 01 	sts	0x01D9, r29
 292:	c0 93 d8 01 	sts	0x01D8, r28
 296:	20 c0       	rjmp	.+64     	; 0x2d8 <free+0xaa>
 298:	12 96       	adiw	r26, 0x02	; 2
 29a:	8d 91       	ld	r24, X+
 29c:	9c 91       	ld	r25, X
 29e:	13 97       	sbiw	r26, 0x03	; 3
 2a0:	ad 01       	movw	r20, r26
 2a2:	00 97       	sbiw	r24, 0x00	; 0
 2a4:	11 f0       	breq	.+4      	; 0x2aa <free+0x7c>
 2a6:	dc 01       	movw	r26, r24
 2a8:	d3 cf       	rjmp	.-90     	; 0x250 <free+0x22>
 2aa:	fa 01       	movw	r30, r20
 2ac:	d3 83       	std	Z+3, r29	; 0x03
 2ae:	c2 83       	std	Z+2, r28	; 0x02
 2b0:	21 91       	ld	r18, Z+
 2b2:	31 91       	ld	r19, Z+
 2b4:	e2 0f       	add	r30, r18
 2b6:	f3 1f       	adc	r31, r19
 2b8:	ce 17       	cp	r28, r30
 2ba:	df 07       	cpc	r29, r31
 2bc:	69 f4       	brne	.+26     	; 0x2d8 <free+0xaa>
 2be:	88 81       	ld	r24, Y
 2c0:	99 81       	ldd	r25, Y+1	; 0x01
 2c2:	28 0f       	add	r18, r24
 2c4:	39 1f       	adc	r19, r25
 2c6:	2e 5f       	subi	r18, 0xFE	; 254
 2c8:	3f 4f       	sbci	r19, 0xFF	; 255
 2ca:	fa 01       	movw	r30, r20
 2cc:	31 83       	std	Z+1, r19	; 0x01
 2ce:	20 83       	st	Z, r18
 2d0:	8a 81       	ldd	r24, Y+2	; 0x02
 2d2:	9b 81       	ldd	r25, Y+3	; 0x03
 2d4:	93 83       	std	Z+3, r25	; 0x03
 2d6:	82 83       	std	Z+2, r24	; 0x02
 2d8:	df 91       	pop	r29
 2da:	cf 91       	pop	r28
 2dc:	08 95       	ret

000002de <myitoa>:

int myitoa(int num, char* string, int base) //switch int to ascii and input in passed array
{
 2de:	ef 92       	push	r14
 2e0:	ff 92       	push	r15
 2e2:	0f 93       	push	r16
 2e4:	1f 93       	push	r17
 2e6:	cf 93       	push	r28
 2e8:	df 93       	push	r29
 2ea:	ec 01       	movw	r28, r24
 2ec:	7b 01       	movw	r14, r22
 2ee:	8a 01       	movw	r16, r20
 2f0:	e0 e0       	ldi	r30, 0x00	; 0
 2f2:	f0 e0       	ldi	r31, 0x00	; 0
 2f4:	04 c0       	rjmp	.+8      	; 0x2fe <myitoa+0x20>
    
    num1 = num;

    while(num1 > 0)
    {
        num1 = (num1 / base);
 2f6:	b8 01       	movw	r22, r16
 2f8:	11 d2       	rcall	.+1058   	; 0x71c <__divmodhi4>
 2fa:	cb 01       	movw	r24, r22
        digits++;
 2fc:	31 96       	adiw	r30, 0x01	; 1
    int t = 0; //temp value for array number input
    int digits = 0;  //number to calculate space in array and values to be put in said space
    
    num1 = num;

    while(num1 > 0)
 2fe:	18 16       	cp	r1, r24
 300:	19 06       	cpc	r1, r25
 302:	cc f3       	brlt	.-14     	; 0x2f6 <myitoa+0x18>
 304:	ee 0d       	add	r30, r14
 306:	ff 1d       	adc	r31, r15
 308:	09 c0       	rjmp	.+18     	; 0x31c <myitoa+0x3e>
    int x = digits-1;

    while (num > 0)
    {
        t = (num % base);
        string[x] = t + '0';
 30a:	ce 01       	movw	r24, r28
 30c:	b8 01       	movw	r22, r16
 30e:	06 d2       	rcall	.+1036   	; 0x71c <__divmodhi4>
 310:	80 5d       	subi	r24, 0xD0	; 208
 312:	80 83       	st	Z, r24
        x--;
        num = num / base;
 314:	ce 01       	movw	r24, r28
 316:	b8 01       	movw	r22, r16
 318:	01 d2       	rcall	.+1026   	; 0x71c <__divmodhi4>
 31a:	eb 01       	movw	r28, r22
 31c:	31 97       	sbiw	r30, 0x01	; 1
        digits++;
    }

    int x = digits-1;

    while (num > 0)
 31e:	1c 16       	cp	r1, r28
 320:	1d 06       	cpc	r1, r29
 322:	9c f3       	brlt	.-26     	; 0x30a <myitoa+0x2c>
        string[x] = t + '0';
        x--;
        num = num / base;
    }
    return 1;
}
 324:	81 e0       	ldi	r24, 0x01	; 1
 326:	90 e0       	ldi	r25, 0x00	; 0
 328:	df 91       	pop	r29
 32a:	cf 91       	pop	r28
 32c:	1f 91       	pop	r17
 32e:	0f 91       	pop	r16
 330:	ff 90       	pop	r15
 332:	ef 90       	pop	r14
 334:	08 95       	ret

00000336 <initialize>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))


void initialize( void )
{
	CPU_PRESCALE(0);
 336:	e1 e6       	ldi	r30, 0x61	; 97
 338:	f0 e0       	ldi	r31, 0x00	; 0
 33a:	80 e8       	ldi	r24, 0x80	; 128
 33c:	80 83       	st	Z, r24
 33e:	10 82       	st	Z, r1
	
	USART_init(BAUD_RATE);
 340:	83 e3       	ldi	r24, 0x33	; 51
 342:	90 e0       	ldi	r25, 0x00	; 0
 344:	38 d1       	rcall	.+624    	; 0x5b6 <USART_init>
	USART_transmit('\f');	// Send form feed to clear the terminal.
 346:	8c e0       	ldi	r24, 0x0C	; 12
 348:	41 d1       	rcall	.+642    	; 0x5cc <USART_transmit>
	USART_send_string("WunderBoard initializing...\r\n");
 34a:	80 e0       	ldi	r24, 0x00	; 0
 34c:	91 e0       	ldi	r25, 0x01	; 1
 34e:	50 d1       	rcall	.+672    	; 0x5f0 <USART_send_string>
	
	USART_send_string("\tSetting ADC prescaler and disabling free running mode...\r\n");
 350:	8e e1       	ldi	r24, 0x1E	; 30
 352:	91 e0       	ldi	r25, 0x01	; 1
 354:	4d d1       	rcall	.+666    	; 0x5f0 <USART_send_string>
	setup_ADC(ADC_PRESCALER_32, FALSE);
 356:	85 e0       	ldi	r24, 0x05	; 5
 358:	60 e0       	ldi	r22, 0x00	; 0
 35a:	aa d1       	rcall	.+852    	; 0x6b0 <setup_ADC>
	
	USART_send_string("\tEnabling ADC...\r\n");
 35c:	8a e5       	ldi	r24, 0x5A	; 90
 35e:	91 e0       	ldi	r25, 0x01	; 1
 360:	47 d1       	rcall	.+654    	; 0x5f0 <USART_send_string>
	ADC_enable();
 362:	7e d1       	rcall	.+764    	; 0x660 <ADC_enable>
	
	USART_send_string("\tSetting ADC reference to Vcc...\r\n");
 364:	8d e6       	ldi	r24, 0x6D	; 109
 366:	91 e0       	ldi	r25, 0x01	; 1
 368:	43 d1       	rcall	.+646    	; 0x5f0 <USART_send_string>
	ADC_set_reference(ADC_REF_VCC);
 36a:	80 e4       	ldi	r24, 0x40	; 64
 36c:	91 d1       	rcall	.+802    	; 0x690 <ADC_set_reference>
	
	// Configure IO //
	USART_send_string("\tConfiguring IO...\r\n");
 36e:	80 e9       	ldi	r24, 0x90	; 144
 370:	91 e0       	ldi	r25, 0x01	; 1
 372:	3e d1       	rcall	.+636    	; 0x5f0 <USART_send_string>
	//DDRx corresponds to PORTx/PINx, dependng on direction of data flow -- PORT for output, PIN for input
	DDRA = 0x00;	// Buttons and switches
 374:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 376:	87 ee       	ldi	r24, 0xE7	; 231
 378:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 37a:	8f ef       	ldi	r24, 0xFF	; 255
 37c:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// LED Column
 37e:	87 e4       	ldi	r24, 0x47	; 71
 380:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 382:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 384:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 386:	81 e0       	ldi	r24, 0x01	; 1
 388:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x81;
 38a:	81 e8       	ldi	r24, 0x81	; 129
 38c:	88 b9       	out	0x08, r24	; 8
	PORTE = 0x00;
 38e:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 390:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 392:	80 e4       	ldi	r24, 0x40	; 64
 394:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 398:	8b e0       	ldi	r24, 0x0B	; 11
 39a:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 39e:	88 e1       	ldi	r24, 0x18	; 24
 3a0:	90 e0       	ldi	r25, 0x00	; 0
 3a2:	90 93 89 00 	sts	0x0089, r25
 3a6:	80 93 88 00 	sts	0x0088, r24

	USART_send_string("\tSetting SPI\r\n");
 3aa:	85 ea       	ldi	r24, 0xA5	; 165
 3ac:	91 e0       	ldi	r25, 0x01	; 1
 3ae:	20 d1       	rcall	.+576    	; 0x5f0 <USART_send_string>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3b0:	81 e5       	ldi	r24, 0x51	; 81
 3b2:	8c bd       	out	0x2c, r24	; 44

}
 3b4:	08 95       	ret

000003b6 <main>:
    return 1;
}


int main(int argc, char **argv)
{
 3b6:	2f 92       	push	r2
 3b8:	3f 92       	push	r3
 3ba:	4f 92       	push	r4
 3bc:	5f 92       	push	r5
 3be:	6f 92       	push	r6
 3c0:	7f 92       	push	r7
 3c2:	8f 92       	push	r8
 3c4:	9f 92       	push	r9
 3c6:	af 92       	push	r10
 3c8:	bf 92       	push	r11
 3ca:	cf 92       	push	r12
 3cc:	df 92       	push	r13
 3ce:	ef 92       	push	r14
 3d0:	ff 92       	push	r15
 3d2:	0f 93       	push	r16
 3d4:	1f 93       	push	r17
 3d6:	df 93       	push	r29
 3d8:	cf 93       	push	r28
 3da:	00 d0       	rcall	.+0      	; 0x3dc <main+0x26>
 3dc:	00 d0       	rcall	.+0      	; 0x3de <main+0x28>
 3de:	0f 92       	push	r0
 3e0:	cd b7       	in	r28, 0x3d	; 61
 3e2:	de b7       	in	r29, 0x3e	; 62
	initialize();
 3e4:	a8 df       	rcall	.-176    	; 0x336 <initialize>
	clear_array();
 3e6:	85 d1       	rcall	.+778    	; 0x6f2 <clear_array>
unsigned char initialize_TIMER0()
{
	//See chapter 13 in the data sheet, and look up each of these values in turn.
		
	/* Set the CTC mode */
	TCCR0A = (1<<WGM01);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	84 bd       	out	0x24, r24	; 36
	
	/* Set the Clock Frequency */
	TCCR0B = CK1024;
 3ec:	85 e0       	ldi	r24, 0x05	; 5
 3ee:	85 bd       	out	0x25, r24	; 37
	
	/* Set initial count value */
	OCR0A = 255;
 3f0:	8f ef       	ldi	r24, 0xFF	; 255
 3f2:	87 bd       	out	0x27, r24	; 39
The TCNT0 variable should also be reset to 0 so that the new timer rate starts from 0.
@param [in] clock Insert Comment @param [in] count Insert Comment @return The function
returns a 1 or error and 0 on successful completion.*/
unsigned char set_TIMER0(unsigned char clock, unsigned char count)
{
	OCR0A = count; //maximum value it counts to
 3f4:	87 bd       	out	0x27, r24	; 39
	TCCR0B &= ~(0b00000111); //inverting the cs02 cs01 and cs00 values in the TCCR0B register
 3f6:	85 b5       	in	r24, 0x25	; 37
 3f8:	88 7f       	andi	r24, 0xF8	; 248
 3fa:	85 bd       	out	0x25, r24	; 37
	TCCR0B |= clock; //setting TCCR0B register values that the user defines.
 3fc:	85 b5       	in	r24, 0x25	; 37
 3fe:	85 60       	ori	r24, 0x05	; 5
 400:	85 bd       	out	0x25, r24	; 37
 402:	1d 82       	std	Y+5, r1	; 0x05
 404:	1c 82       	std	Y+4, r1	; 0x04
 406:	81 e0       	ldi	r24, 0x01	; 1
 408:	89 83       	std	Y+1, r24	; 0x01
 40a:	44 24       	eor	r4, r4
 40c:	55 24       	eor	r5, r5
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
 40e:	80 ea       	ldi	r24, 0xA0	; 160
 410:	28 2e       	mov	r2, r24
 412:	8f e0       	ldi	r24, 0x0F	; 15
 414:	38 2e       	mov	r3, r24
 416:	cc c0       	rjmp	.+408    	; 0x5b0 <main+0x1fa>
					{
						for(int s2 = 0; s2 < 6; s2++)
						{
							for(int s = 0; s < 10; s++)
							{								
								string = (char *) malloc(sizeof(char) *10);								
 418:	8a e0       	ldi	r24, 0x0A	; 10
 41a:	90 e0       	ldi	r25, 0x00	; 0
 41c:	5b de       	rcall	.-842    	; 0xd4 <malloc>
 41e:	8a 83       	std	Y+2, r24	; 0x02
 420:	9b 83       	std	Y+3, r25	; 0x03
								o++;
 422:	08 94       	sec
 424:	41 1c       	adc	r4, r1
 426:	51 1c       	adc	r5, r1
								
								
								if(o == 3600)
 428:	90 e1       	ldi	r25, 0x10	; 16
 42a:	49 16       	cp	r4, r25
 42c:	9e e0       	ldi	r25, 0x0E	; 14
 42e:	59 06       	cpc	r5, r25
 430:	11 f4       	brne	.+4      	; 0x436 <main+0x80>
 432:	44 24       	eor	r4, r4
 434:	55 24       	eor	r5, r5
								{
									o = 0;
									w++;
								}
								myitoa(o,string,base);
 436:	c2 01       	movw	r24, r4
 438:	6a 81       	ldd	r22, Y+2	; 0x02
 43a:	7b 81       	ldd	r23, Y+3	; 0x03
 43c:	4a e0       	ldi	r20, 0x0A	; 10
 43e:	50 e0       	ldi	r21, 0x00	; 0
 440:	4e df       	rcall	.-356    	; 0x2de <myitoa>
								USART_send_string("Seconds: ");
 442:	84 eb       	ldi	r24, 0xB4	; 180
 444:	91 e0       	ldi	r25, 0x01	; 1
 446:	d4 d0       	rcall	.+424    	; 0x5f0 <USART_send_string>
								USART_send_string(string);
 448:	8a 81       	ldd	r24, Y+2	; 0x02
 44a:	9b 81       	ldd	r25, Y+3	; 0x03
 44c:	d1 d0       	rcall	.+418    	; 0x5f0 <USART_send_string>
								USART_send_string("\r\n");
 44e:	8e eb       	ldi	r24, 0xBE	; 190
 450:	91 e0       	ldi	r25, 0x01	; 1
 452:	ce d0       	rcall	.+412    	; 0x5f0 <USART_send_string>
								free(string);	
 454:	8a 81       	ldd	r24, Y+2	; 0x02
 456:	9b 81       	ldd	r25, Y+3	; 0x03
 458:	ea de       	rcall	.-556    	; 0x22e <free>
 45a:	00 e0       	ldi	r16, 0x00	; 0
 45c:	10 e0       	ldi	r17, 0x00	; 0
/** This function checks if TIMER0 has elapsed. 
@return This function should return a 1 if the timer has elapsed, else return 0*/
unsigned char check_TIMER0()
{
	//look at the TIFR0 register in the datasheet.
	if(TIFR0 &(1<<OCF0A))
 45e:	a9 9b       	sbis	0x15, 1	; 21
 460:	03 c0       	rjmp	.+6      	; 0x468 <main+0xb2>
	{
		TIFR0 |= (1<<OCF0A);
 462:	a9 9a       	sbi	0x15, 1	; 21
								}
								for(i= 0; i <= 30; i)
								{
									if(check_TIMER0() == 1)
									{
										i++;
 464:	0f 5f       	subi	r16, 0xFF	; 255
 466:	1f 4f       	sbci	r17, 0xFF	; 255
									}	
																	
									
									PORTE = 0;
 468:	1e b8       	out	0x0e, r1	; 14
									set_array_red(s);
 46a:	8e 2d       	mov	r24, r14
 46c:	2f d1       	rcall	.+606    	; 0x6cc <set_array_red>
 46e:	c1 01       	movw	r24, r2
 470:	01 97       	sbiw	r24, 0x01	; 1
 472:	f1 f7       	brne	.-4      	; 0x470 <main+0xba>
									_delay_ms(2);
									
									PORTE = 1;
 474:	e1 e0       	ldi	r30, 0x01	; 1
 476:	ee b9       	out	0x0e, r30	; 14
									set_array_red(s2);
 478:	8a 2d       	mov	r24, r10
 47a:	28 d1       	rcall	.+592    	; 0x6cc <set_array_red>
 47c:	c1 01       	movw	r24, r2
 47e:	01 97       	sbiw	r24, 0x01	; 1
 480:	f1 f7       	brne	.-4      	; 0x47e <main+0xc8>
									_delay_ms(2);

									PORTE = 2;
 482:	f2 e0       	ldi	r31, 0x02	; 2
 484:	fe b9       	out	0x0e, r31	; 14
									set_array_red(m);
 486:	88 2d       	mov	r24, r8
 488:	21 d1       	rcall	.+578    	; 0x6cc <set_array_red>
 48a:	c1 01       	movw	r24, r2
 48c:	01 97       	sbiw	r24, 0x01	; 1
 48e:	f1 f7       	brne	.-4      	; 0x48c <main+0xd6>
									_delay_ms(2);

									PORTE = 3;
 490:	83 e0       	ldi	r24, 0x03	; 3
 492:	8e b9       	out	0x0e, r24	; 14
									set_array_red(m2);
 494:	86 2d       	mov	r24, r6
 496:	1a d1       	rcall	.+564    	; 0x6cc <set_array_red>
 498:	c1 01       	movw	r24, r2
 49a:	01 97       	sbiw	r24, 0x01	; 1
 49c:	f1 f7       	brne	.-4      	; 0x49a <main+0xe4>
									_delay_ms(2);

									PORTE = 4;
 49e:	94 e0       	ldi	r25, 0x04	; 4
 4a0:	9e b9       	out	0x0e, r25	; 14
									set_array_red(h);
 4a2:	8c 2d       	mov	r24, r12
 4a4:	13 d1       	rcall	.+550    	; 0x6cc <set_array_red>
 4a6:	c1 01       	movw	r24, r2
 4a8:	01 97       	sbiw	r24, 0x01	; 1
 4aa:	f1 f7       	brne	.-4      	; 0x4a8 <main+0xf2>
									_delay_ms(2);

									PORTE = 5;
 4ac:	e5 e0       	ldi	r30, 0x05	; 5
 4ae:	ee b9       	out	0x0e, r30	; 14
									set_array_red(h2);
 4b0:	8c 81       	ldd	r24, Y+4	; 0x04
 4b2:	0c d1       	rcall	.+536    	; 0x6cc <set_array_red>
 4b4:	c1 01       	movw	r24, r2
 4b6:	01 97       	sbiw	r24, 0x01	; 1
 4b8:	f1 f7       	brne	.-4      	; 0x4b6 <main+0x100>
									_delay_ms(2);
									
									num = s;
									
									switch (printstate)
 4ba:	f9 81       	ldd	r31, Y+1	; 0x01
 4bc:	f1 30       	cpi	r31, 0x01	; 1
 4be:	29 f0       	breq	.+10     	; 0x4ca <main+0x114>
 4c0:	f1 30       	cpi	r31, 0x01	; 1
 4c2:	58 f0       	brcs	.+22     	; 0x4da <main+0x124>
 4c4:	f2 30       	cpi	r31, 0x02	; 2
 4c6:	19 f5       	brne	.+70     	; 0x50e <main+0x158>
 4c8:	0e c0       	rjmp	.+28     	; 0x4e6 <main+0x130>
									{
									case idle:
										if(USART_available() && USART_receive() == 's')
 4ca:	87 d0       	rcall	.+270    	; 0x5da <USART_available>
 4cc:	88 23       	and	r24, r24
 4ce:	f9 f0       	breq	.+62     	; 0x50e <main+0x158>
 4d0:	88 d0       	rcall	.+272    	; 0x5e2 <USART_receive>
 4d2:	83 37       	cpi	r24, 0x73	; 115
 4d4:	e1 f4       	brne	.+56     	; 0x50e <main+0x158>
 4d6:	19 82       	std	Y+1, r1	; 0x01
 4d8:	1a c0       	rjmp	.+52     	; 0x50e <main+0x158>
/** This function checks if TIMER0 has elapsed. 
@return This function should return a 1 if the timer has elapsed, else return 0*/
unsigned char check_TIMER0()
{
	//look at the TIFR0 register in the datasheet.
	if(TIFR0 &(1<<OCF0A))
 4da:	a9 9b       	sbis	0x15, 1	; 21
 4dc:	18 c0       	rjmp	.+48     	; 0x50e <main+0x158>
	{
		TIFR0 |= (1<<OCF0A);
 4de:	a9 9a       	sbi	0x15, 1	; 21
 4e0:	82 e0       	ldi	r24, 0x02	; 2
 4e2:	89 83       	std	Y+1, r24	; 0x01
 4e4:	14 c0       	rjmp	.+40     	; 0x50e <main+0x158>
										{
											printstate = sample;
										}
										break;
			 						case sample:			 																	
										if(i == 30)
 4e6:	0e 31       	cpi	r16, 0x1E	; 30
 4e8:	11 05       	cpc	r17, r1
 4ea:	31 f4       	brne	.+12     	; 0x4f8 <main+0x142>
										{	
											USART_send_string(string);
 4ec:	8a 81       	ldd	r24, Y+2	; 0x02
 4ee:	9b 81       	ldd	r25, Y+3	; 0x03
 4f0:	7f d0       	rcall	.+254    	; 0x5f0 <USART_send_string>
											USART_send_string("\r\n");								 																		
 4f2:	8e eb       	ldi	r24, 0xBE	; 190
 4f4:	91 e0       	ldi	r25, 0x01	; 1
 4f6:	7c d0       	rcall	.+248    	; 0x5f0 <USART_send_string>
											USART_send_string("Seconds: ");			 								
			 								USART_send_string(itoa(q,buffer,10));
			 								USART_send_string("\r\n");*/
			 								//free(string);
			 							}
			 							if(USART_available() && USART_receive() == 's')
 4f8:	70 d0       	rcall	.+224    	; 0x5da <USART_available>
 4fa:	88 23       	and	r24, r24
 4fc:	41 f0       	breq	.+16     	; 0x50e <main+0x158>
 4fe:	71 d0       	rcall	.+226    	; 0x5e2 <USART_receive>
 500:	83 37       	cpi	r24, 0x73	; 115
 502:	29 f4       	brne	.+10     	; 0x50e <main+0x158>
			 							{
											USART_send_string("Device Idle\r\n");			 		
 504:	81 ec       	ldi	r24, 0xC1	; 193
 506:	91 e0       	ldi	r25, 0x01	; 1
 508:	73 d0       	rcall	.+230    	; 0x5f0 <USART_send_string>
 50a:	91 e0       	ldi	r25, 0x01	; 1
 50c:	99 83       	std	Y+1, r25	; 0x01
			 								printstate = idle;
			 							}
									}

									if(h2 == 1 && h == 3)
 50e:	ec 81       	ldd	r30, Y+4	; 0x04
 510:	fd 81       	ldd	r31, Y+5	; 0x05
 512:	31 97       	sbiw	r30, 0x01	; 1
 514:	81 f4       	brne	.+32     	; 0x536 <main+0x180>
 516:	f3 e0       	ldi	r31, 0x03	; 3
 518:	cf 16       	cp	r12, r31
 51a:	d1 04       	cpc	r13, r1
 51c:	61 f4       	brne	.+24     	; 0x536 <main+0x180>
 51e:	aa 24       	eor	r10, r10
 520:	bb 24       	eor	r11, r11
 522:	ee 24       	eor	r14, r14
 524:	ff 24       	eor	r15, r15
 526:	1d 82       	std	Y+5, r1	; 0x05
 528:	1c 82       	std	Y+4, r1	; 0x04
 52a:	cc 24       	eor	r12, r12
 52c:	dd 24       	eor	r13, r13
 52e:	66 24       	eor	r6, r6
 530:	77 24       	eor	r7, r7
 532:	88 24       	eor	r8, r8
 534:	99 24       	eor	r9, r9
								
								if(q == 60)
								{
									q = 0;
								}
								for(i= 0; i <= 30; i)
 536:	0f 31       	cpi	r16, 0x1F	; 31
 538:	11 05       	cpc	r17, r1
 53a:	0c f4       	brge	.+2      	; 0x53e <main+0x188>
 53c:	90 cf       	rjmp	.-224    	; 0x45e <main+0xa8>
				{
					for(int m = 0; m < 10; m++)
					{
						for(int s2 = 0; s2 < 6; s2++)
						{
							for(int s = 0; s < 10; s++)
 53e:	08 94       	sec
 540:	e1 1c       	adc	r14, r1
 542:	f1 1c       	adc	r15, r1
 544:	8a e0       	ldi	r24, 0x0A	; 10
 546:	e8 16       	cp	r14, r24
 548:	f1 04       	cpc	r15, r1
 54a:	0c f4       	brge	.+2      	; 0x54e <main+0x198>
 54c:	65 cf       	rjmp	.-310    	; 0x418 <main+0x62>
			{
				for(int m2 = 0; m2 < 6; m2++)
				{
					for(int m = 0; m < 10; m++)
					{
						for(int s2 = 0; s2 < 6; s2++)
 54e:	08 94       	sec
 550:	a1 1c       	adc	r10, r1
 552:	b1 1c       	adc	r11, r1
 554:	96 e0       	ldi	r25, 0x06	; 6
 556:	a9 16       	cp	r10, r25
 558:	b1 04       	cpc	r11, r1
 55a:	1c f4       	brge	.+6      	; 0x562 <main+0x1ac>
 55c:	ee 24       	eor	r14, r14
 55e:	ff 24       	eor	r15, r15
 560:	5b cf       	rjmp	.-330    	; 0x418 <main+0x62>
		{
			for(int h = 0; h < 10; h++)
			{
				for(int m2 = 0; m2 < 6; m2++)
				{
					for(int m = 0; m < 10; m++)
 562:	08 94       	sec
 564:	81 1c       	adc	r8, r1
 566:	91 1c       	adc	r9, r1
 568:	ea e0       	ldi	r30, 0x0A	; 10
 56a:	8e 16       	cp	r8, r30
 56c:	91 04       	cpc	r9, r1
 56e:	1c f4       	brge	.+6      	; 0x576 <main+0x1c0>
 570:	aa 24       	eor	r10, r10
 572:	bb 24       	eor	r11, r11
 574:	f3 cf       	rjmp	.-26     	; 0x55c <main+0x1a6>
		
		for(int h2 = 0; h2 < 2; h2++)
		{
			for(int h = 0; h < 10; h++)
			{
				for(int m2 = 0; m2 < 6; m2++)
 576:	08 94       	sec
 578:	61 1c       	adc	r6, r1
 57a:	71 1c       	adc	r7, r1
 57c:	f6 e0       	ldi	r31, 0x06	; 6
 57e:	6f 16       	cp	r6, r31
 580:	71 04       	cpc	r7, r1
 582:	1c f4       	brge	.+6      	; 0x58a <main+0x1d4>
 584:	88 24       	eor	r8, r8
 586:	99 24       	eor	r9, r9
 588:	f3 cf       	rjmp	.-26     	; 0x570 <main+0x1ba>
	while(1){	
		int i;	
		
		for(int h2 = 0; h2 < 2; h2++)
		{
			for(int h = 0; h < 10; h++)
 58a:	08 94       	sec
 58c:	c1 1c       	adc	r12, r1
 58e:	d1 1c       	adc	r13, r1
 590:	8a e0       	ldi	r24, 0x0A	; 10
 592:	c8 16       	cp	r12, r24
 594:	d1 04       	cpc	r13, r1
 596:	1c f4       	brge	.+6      	; 0x59e <main+0x1e8>
 598:	66 24       	eor	r6, r6
 59a:	77 24       	eor	r7, r7
 59c:	f3 cf       	rjmp	.-26     	; 0x584 <main+0x1ce>


	while(1){	
		int i;	
		
		for(int h2 = 0; h2 < 2; h2++)
 59e:	ec 81       	ldd	r30, Y+4	; 0x04
 5a0:	fd 81       	ldd	r31, Y+5	; 0x05
 5a2:	31 96       	adiw	r30, 0x01	; 1
 5a4:	fd 83       	std	Y+5, r31	; 0x05
 5a6:	ec 83       	std	Y+4, r30	; 0x04
 5a8:	31 97       	sbiw	r30, 0x01	; 1
 5aa:	11 f0       	breq	.+4      	; 0x5b0 <main+0x1fa>
 5ac:	1d 82       	std	Y+5, r1	; 0x05
 5ae:	1c 82       	std	Y+4, r1	; 0x04
 5b0:	cc 24       	eor	r12, r12
 5b2:	dd 24       	eor	r13, r13
 5b4:	f1 cf       	rjmp	.-30     	; 0x598 <main+0x1e2>

000005b6 <USART_init>:
 5b6:	90 93 cd 00 	sts	0x00CD, r25
 5ba:	80 93 cc 00 	sts	0x00CC, r24
 5be:	88 e1       	ldi	r24, 0x18	; 24
 5c0:	80 93 c9 00 	sts	0x00C9, r24
 5c4:	86 e0       	ldi	r24, 0x06	; 6
 5c6:	80 93 ca 00 	sts	0x00CA, r24
 5ca:	08 95       	ret

000005cc <USART_transmit>:
 5cc:	90 91 c8 00 	lds	r25, 0x00C8
 5d0:	95 ff       	sbrs	r25, 5
 5d2:	fc cf       	rjmp	.-8      	; 0x5cc <USART_transmit>
 5d4:	80 93 ce 00 	sts	0x00CE, r24
 5d8:	08 95       	ret

000005da <USART_available>:
 5da:	80 91 c8 00 	lds	r24, 0x00C8
 5de:	80 78       	andi	r24, 0x80	; 128
 5e0:	08 95       	ret

000005e2 <USART_receive>:
 5e2:	80 91 c8 00 	lds	r24, 0x00C8
 5e6:	87 ff       	sbrs	r24, 7
 5e8:	fc cf       	rjmp	.-8      	; 0x5e2 <USART_receive>
 5ea:	80 91 ce 00 	lds	r24, 0x00CE
 5ee:	08 95       	ret

000005f0 <USART_send_string>:
 5f0:	ef 92       	push	r14
 5f2:	ff 92       	push	r15
 5f4:	cf 93       	push	r28
 5f6:	df 93       	push	r29
 5f8:	e8 2e       	mov	r14, r24
 5fa:	e7 01       	movw	r28, r14
 5fc:	7e 01       	movw	r14, r28
 5fe:	f9 2e       	mov	r15, r25
 600:	e7 01       	movw	r28, r14
 602:	01 c0       	rjmp	.+2      	; 0x606 <USART_send_string+0x16>
 604:	e3 df       	rcall	.-58     	; 0x5cc <USART_transmit>
 606:	89 91       	ld	r24, Y+
 608:	88 23       	and	r24, r24
 60a:	e1 f7       	brne	.-8      	; 0x604 <USART_send_string+0x14>
 60c:	df 91       	pop	r29
 60e:	cf 91       	pop	r28
 610:	ff 90       	pop	r15
 612:	ef 90       	pop	r14
 614:	08 95       	ret

00000616 <ADC_set_prescaler>:
 616:	ea e7       	ldi	r30, 0x7A	; 122
 618:	f0 e0       	ldi	r31, 0x00	; 0
 61a:	90 81       	ld	r25, Z
 61c:	98 7f       	andi	r25, 0xF8	; 248
 61e:	90 83       	st	Z, r25
 620:	90 81       	ld	r25, Z
 622:	87 70       	andi	r24, 0x07	; 7
 624:	89 2b       	or	r24, r25
 626:	80 83       	st	Z, r24
 628:	08 95       	ret

0000062a <ADC_set_free_running>:
 62a:	88 23       	and	r24, r24
 62c:	99 f0       	breq	.+38     	; 0x654 <ADC_set_free_running+0x2a>
 62e:	80 91 7b 00 	lds	r24, 0x007B
 632:	8b 7f       	andi	r24, 0xFB	; 251
 634:	80 93 7b 00 	sts	0x007B, r24
 638:	80 91 7b 00 	lds	r24, 0x007B
 63c:	8d 7f       	andi	r24, 0xFD	; 253
 63e:	80 93 7b 00 	sts	0x007B, r24
 642:	80 91 7b 00 	lds	r24, 0x007B
 646:	8e 7f       	andi	r24, 0xFE	; 254
 648:	80 93 7b 00 	sts	0x007B, r24
 64c:	80 91 7a 00 	lds	r24, 0x007A
 650:	80 62       	ori	r24, 0x20	; 32
 652:	03 c0       	rjmp	.+6      	; 0x65a <ADC_set_free_running+0x30>
 654:	80 91 7a 00 	lds	r24, 0x007A
 658:	8f 7d       	andi	r24, 0xDF	; 223
 65a:	80 93 7a 00 	sts	0x007A, r24
 65e:	08 95       	ret

00000660 <ADC_enable>:
 660:	ea e7       	ldi	r30, 0x7A	; 122
 662:	f0 e0       	ldi	r31, 0x00	; 0
 664:	80 81       	ld	r24, Z
 666:	80 68       	ori	r24, 0x80	; 128
 668:	80 83       	st	Z, r24
 66a:	08 95       	ret

0000066c <ADC_start>:
 66c:	ea e7       	ldi	r30, 0x7A	; 122
 66e:	f0 e0       	ldi	r31, 0x00	; 0
 670:	80 81       	ld	r24, Z
 672:	80 64       	ori	r24, 0x40	; 64
 674:	80 83       	st	Z, r24
 676:	08 95       	ret

00000678 <ADC_finish>:
 678:	ea e7       	ldi	r30, 0x7A	; 122
 67a:	f0 e0       	ldi	r31, 0x00	; 0
 67c:	80 81       	ld	r24, Z
 67e:	80 61       	ori	r24, 0x10	; 16
 680:	80 83       	st	Z, r24
 682:	08 95       	ret

00000684 <ADC_done>:
 684:	90 91 7a 00 	lds	r25, 0x007A
 688:	81 e0       	ldi	r24, 0x01	; 1
 68a:	94 ff       	sbrs	r25, 4
 68c:	80 e0       	ldi	r24, 0x00	; 0
 68e:	08 95       	ret

00000690 <ADC_set_reference>:
 690:	90 91 7c 00 	lds	r25, 0x007C
 694:	9f 73       	andi	r25, 0x3F	; 63
 696:	90 93 7c 00 	sts	0x007C, r25
 69a:	90 91 7c 00 	lds	r25, 0x007C
 69e:	80 7c       	andi	r24, 0xC0	; 192
 6a0:	89 2b       	or	r24, r25
 6a2:	80 93 7c 00 	sts	0x007C, r24
 6a6:	e2 df       	rcall	.-60     	; 0x66c <ADC_start>
 6a8:	ed df       	rcall	.-38     	; 0x684 <ADC_done>
 6aa:	88 23       	and	r24, r24
 6ac:	e9 f3       	breq	.-6      	; 0x6a8 <ADC_set_reference+0x18>
 6ae:	e4 cf       	rjmp	.-56     	; 0x678 <ADC_finish>

000006b0 <setup_ADC>:
 6b0:	df 93       	push	r29
 6b2:	cf 93       	push	r28
 6b4:	0f 92       	push	r0
 6b6:	cd b7       	in	r28, 0x3d	; 61
 6b8:	de b7       	in	r29, 0x3e	; 62
 6ba:	69 83       	std	Y+1, r22	; 0x01
 6bc:	ac df       	rcall	.-168    	; 0x616 <ADC_set_prescaler>
 6be:	69 81       	ldd	r22, Y+1	; 0x01
 6c0:	86 2f       	mov	r24, r22
 6c2:	b3 df       	rcall	.-154    	; 0x62a <ADC_set_free_running>
 6c4:	0f 90       	pop	r0
 6c6:	cf 91       	pop	r28
 6c8:	df 91       	pop	r29
 6ca:	08 95       	ret

000006cc <set_array_red>:
 6cc:	8e bd       	out	0x2e, r24	; 46
 6ce:	0d b4       	in	r0, 0x2d	; 45
 6d0:	07 fe       	sbrs	r0, 7
 6d2:	fd cf       	rjmp	.-6      	; 0x6ce <set_array_red+0x2>
 6d4:	1e bc       	out	0x2e, r1	; 46
 6d6:	0d b4       	in	r0, 0x2d	; 45
 6d8:	07 fe       	sbrs	r0, 7
 6da:	fd cf       	rjmp	.-6      	; 0x6d6 <set_array_red+0xa>
 6dc:	1e bc       	out	0x2e, r1	; 46
 6de:	0d b4       	in	r0, 0x2d	; 45
 6e0:	07 fe       	sbrs	r0, 7
 6e2:	fd cf       	rjmp	.-6      	; 0x6de <set_array_red+0x12>
 6e4:	2f 9a       	sbi	0x05, 7	; 5
 6e6:	8a ef       	ldi	r24, 0xFA	; 250
 6e8:	90 e0       	ldi	r25, 0x00	; 0
 6ea:	01 97       	sbiw	r24, 0x01	; 1
 6ec:	f1 f7       	brne	.-4      	; 0x6ea <set_array_red+0x1e>
 6ee:	2f 98       	cbi	0x05, 7	; 5
 6f0:	08 95       	ret

000006f2 <clear_array>:
 6f2:	08 95       	ret

000006f4 <__udivmodhi4>:
 6f4:	aa 1b       	sub	r26, r26
 6f6:	bb 1b       	sub	r27, r27
 6f8:	51 e1       	ldi	r21, 0x11	; 17
 6fa:	07 c0       	rjmp	.+14     	; 0x70a <__udivmodhi4_ep>

000006fc <__udivmodhi4_loop>:
 6fc:	aa 1f       	adc	r26, r26
 6fe:	bb 1f       	adc	r27, r27
 700:	a6 17       	cp	r26, r22
 702:	b7 07       	cpc	r27, r23
 704:	10 f0       	brcs	.+4      	; 0x70a <__udivmodhi4_ep>
 706:	a6 1b       	sub	r26, r22
 708:	b7 0b       	sbc	r27, r23

0000070a <__udivmodhi4_ep>:
 70a:	88 1f       	adc	r24, r24
 70c:	99 1f       	adc	r25, r25
 70e:	5a 95       	dec	r21
 710:	a9 f7       	brne	.-22     	; 0x6fc <__udivmodhi4_loop>
 712:	80 95       	com	r24
 714:	90 95       	com	r25
 716:	bc 01       	movw	r22, r24
 718:	cd 01       	movw	r24, r26
 71a:	08 95       	ret

0000071c <__divmodhi4>:
 71c:	97 fb       	bst	r25, 7
 71e:	09 2e       	mov	r0, r25
 720:	07 26       	eor	r0, r23
 722:	0a d0       	rcall	.+20     	; 0x738 <__divmodhi4_neg1>
 724:	77 fd       	sbrc	r23, 7
 726:	04 d0       	rcall	.+8      	; 0x730 <__divmodhi4_neg2>
 728:	e5 df       	rcall	.-54     	; 0x6f4 <__udivmodhi4>
 72a:	06 d0       	rcall	.+12     	; 0x738 <__divmodhi4_neg1>
 72c:	00 20       	and	r0, r0
 72e:	1a f4       	brpl	.+6      	; 0x736 <__divmodhi4_exit>

00000730 <__divmodhi4_neg2>:
 730:	70 95       	com	r23
 732:	61 95       	neg	r22
 734:	7f 4f       	sbci	r23, 0xFF	; 255

00000736 <__divmodhi4_exit>:
 736:	08 95       	ret

00000738 <__divmodhi4_neg1>:
 738:	f6 f7       	brtc	.-4      	; 0x736 <__divmodhi4_exit>
 73a:	90 95       	com	r25
 73c:	81 95       	neg	r24
 73e:	9f 4f       	sbci	r25, 0xFF	; 255
 740:	08 95       	ret

00000742 <_exit>:
 742:	f8 94       	cli

00000744 <__stop_program>:
 744:	ff cf       	rjmp	.-2      	; 0x744 <__stop_program>
