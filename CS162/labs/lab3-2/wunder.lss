
wunder.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c4  00800100  00000498  0000050c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000498  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .debug_aranges 000001f0  00000000  00000000  000005d0  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 000002fc  00000000  00000000  000007c0  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000e19  00000000  00000000  00000abc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000538  00000000  00000000  000018d5  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000015c2  00000000  00000000  00001e0d  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000340  00000000  00000000  000033d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000004c1  00000000  00000000  00003710  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000b17  00000000  00000000  00003bd1  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000001a8  00000000  00000000  000046e8  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_pubtypes 000000f2  00000000  00000000  00004890  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	4b c0       	rjmp	.+150    	; 0x98 <__ctors_end>
   2:	00 00       	nop
   4:	66 c0       	rjmp	.+204    	; 0xd2 <__bad_interrupt>
   6:	00 00       	nop
   8:	64 c0       	rjmp	.+200    	; 0xd2 <__bad_interrupt>
   a:	00 00       	nop
   c:	62 c0       	rjmp	.+196    	; 0xd2 <__bad_interrupt>
   e:	00 00       	nop
  10:	60 c0       	rjmp	.+192    	; 0xd2 <__bad_interrupt>
  12:	00 00       	nop
  14:	5e c0       	rjmp	.+188    	; 0xd2 <__bad_interrupt>
  16:	00 00       	nop
  18:	5c c0       	rjmp	.+184    	; 0xd2 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	5a c0       	rjmp	.+180    	; 0xd2 <__bad_interrupt>
  1e:	00 00       	nop
  20:	58 c0       	rjmp	.+176    	; 0xd2 <__bad_interrupt>
  22:	00 00       	nop
  24:	56 c0       	rjmp	.+172    	; 0xd2 <__bad_interrupt>
  26:	00 00       	nop
  28:	54 c0       	rjmp	.+168    	; 0xd2 <__bad_interrupt>
  2a:	00 00       	nop
  2c:	52 c0       	rjmp	.+164    	; 0xd2 <__bad_interrupt>
  2e:	00 00       	nop
  30:	50 c0       	rjmp	.+160    	; 0xd2 <__bad_interrupt>
  32:	00 00       	nop
  34:	4e c0       	rjmp	.+156    	; 0xd2 <__bad_interrupt>
  36:	00 00       	nop
  38:	4c c0       	rjmp	.+152    	; 0xd2 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	4a c0       	rjmp	.+148    	; 0xd2 <__bad_interrupt>
  3e:	00 00       	nop
  40:	48 c0       	rjmp	.+144    	; 0xd2 <__bad_interrupt>
  42:	00 00       	nop
  44:	46 c0       	rjmp	.+140    	; 0xd2 <__bad_interrupt>
  46:	00 00       	nop
  48:	44 c0       	rjmp	.+136    	; 0xd2 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	42 c0       	rjmp	.+132    	; 0xd2 <__bad_interrupt>
  4e:	00 00       	nop
  50:	40 c0       	rjmp	.+128    	; 0xd2 <__bad_interrupt>
  52:	00 00       	nop
  54:	3e c0       	rjmp	.+124    	; 0xd2 <__bad_interrupt>
  56:	00 00       	nop
  58:	3c c0       	rjmp	.+120    	; 0xd2 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	3a c0       	rjmp	.+116    	; 0xd2 <__bad_interrupt>
  5e:	00 00       	nop
  60:	38 c0       	rjmp	.+112    	; 0xd2 <__bad_interrupt>
  62:	00 00       	nop
  64:	36 c0       	rjmp	.+108    	; 0xd2 <__bad_interrupt>
  66:	00 00       	nop
  68:	34 c0       	rjmp	.+104    	; 0xd2 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	32 c0       	rjmp	.+100    	; 0xd2 <__bad_interrupt>
  6e:	00 00       	nop
  70:	30 c0       	rjmp	.+96     	; 0xd2 <__bad_interrupt>
  72:	00 00       	nop
  74:	2e c0       	rjmp	.+92     	; 0xd2 <__bad_interrupt>
  76:	00 00       	nop
  78:	2c c0       	rjmp	.+88     	; 0xd2 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	2a c0       	rjmp	.+84     	; 0xd2 <__bad_interrupt>
  7e:	00 00       	nop
  80:	28 c0       	rjmp	.+80     	; 0xd2 <__bad_interrupt>
  82:	00 00       	nop
  84:	26 c0       	rjmp	.+76     	; 0xd2 <__bad_interrupt>
  86:	00 00       	nop
  88:	24 c0       	rjmp	.+72     	; 0xd2 <__bad_interrupt>
  8a:	00 00       	nop
  8c:	22 c0       	rjmp	.+68     	; 0xd2 <__bad_interrupt>
  8e:	00 00       	nop
  90:	20 c0       	rjmp	.+64     	; 0xd2 <__bad_interrupt>
  92:	00 00       	nop
  94:	1e c0       	rjmp	.+60     	; 0xd2 <__bad_interrupt>
  96:	00 00       	nop

00000098 <__ctors_end>:
  98:	11 24       	eor	r1, r1
  9a:	1f be       	out	0x3f, r1	; 63
  9c:	cf ef       	ldi	r28, 0xFF	; 255
  9e:	d0 e2       	ldi	r29, 0x20	; 32
  a0:	de bf       	out	0x3e, r29	; 62
  a2:	cd bf       	out	0x3d, r28	; 61

000000a4 <__do_copy_data>:
  a4:	11 e0       	ldi	r17, 0x01	; 1
  a6:	a0 e0       	ldi	r26, 0x00	; 0
  a8:	b1 e0       	ldi	r27, 0x01	; 1
  aa:	e8 e9       	ldi	r30, 0x98	; 152
  ac:	f4 e0       	ldi	r31, 0x04	; 4
  ae:	00 e0       	ldi	r16, 0x00	; 0
  b0:	0b bf       	out	0x3b, r16	; 59
  b2:	02 c0       	rjmp	.+4      	; 0xb8 <__do_copy_data+0x14>
  b4:	07 90       	elpm	r0, Z+
  b6:	0d 92       	st	X+, r0
  b8:	a4 3c       	cpi	r26, 0xC4	; 196
  ba:	b1 07       	cpc	r27, r17
  bc:	d9 f7       	brne	.-10     	; 0xb4 <__do_copy_data+0x10>

000000be <__do_clear_bss>:
  be:	11 e0       	ldi	r17, 0x01	; 1
  c0:	a4 ec       	ldi	r26, 0xC4	; 196
  c2:	b1 e0       	ldi	r27, 0x01	; 1
  c4:	01 c0       	rjmp	.+2      	; 0xc8 <.do_clear_bss_start>

000000c6 <.do_clear_bss_loop>:
  c6:	1d 92       	st	X+, r1

000000c8 <.do_clear_bss_start>:
  c8:	a4 3c       	cpi	r26, 0xC4	; 196
  ca:	b1 07       	cpc	r27, r17
  cc:	e1 f7       	brne	.-8      	; 0xc6 <.do_clear_bss_loop>
  ce:	42 d0       	rcall	.+132    	; 0x154 <main>
  d0:	e1 c1       	rjmp	.+962    	; 0x494 <_exit>

000000d2 <__bad_interrupt>:
  d2:	96 cf       	rjmp	.-212    	; 0x0 <__vectors>

000000d4 <initialize>:
#define CPU_PRESCALE(n) (CLKPR = 0x80, CLKPR = (n))
#define DEBUG

void initialize( void )
{
	CPU_PRESCALE(0);
  d4:	e1 e6       	ldi	r30, 0x61	; 97
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 e8       	ldi	r24, 0x80	; 128
  da:	80 83       	st	Z, r24
  dc:	10 82       	st	Z, r1
	
	USART_Init(BAUD_RATE);
  de:	83 e3       	ldi	r24, 0x33	; 51
  e0:	90 e0       	ldi	r25, 0x00	; 0
  e2:	e0 d0       	rcall	.+448    	; 0x2a4 <USART_Init>
	USART_Transmit('\f');	// Send form feed to clear the terminal.
  e4:	8c e0       	ldi	r24, 0x0C	; 12
  e6:	e9 d0       	rcall	.+466    	; 0x2ba <USART_Transmit>
	USART_SendString("WunderBoard initializing...\r\n");
  e8:	80 e0       	ldi	r24, 0x00	; 0
  ea:	91 e0       	ldi	r25, 0x01	; 1
  ec:	ed d0       	rcall	.+474    	; 0x2c8 <USART_SendString>
	
	USART_SendString("\tSetting ADC prescaler and disabling free running mode...\r\n");
  ee:	8e e1       	ldi	r24, 0x1E	; 30
  f0:	91 e0       	ldi	r25, 0x01	; 1
  f2:	ea d0       	rcall	.+468    	; 0x2c8 <USART_SendString>
	SetupADC(ADC_PRESCALER_32, FALSE);
  f4:	85 e0       	ldi	r24, 0x05	; 5
  f6:	60 e0       	ldi	r22, 0x00	; 0
  f8:	47 d1       	rcall	.+654    	; 0x388 <SetupADC>
	
	USART_SendString("\tEnabling ADC...\r\n");
  fa:	8a e5       	ldi	r24, 0x5A	; 90
  fc:	91 e0       	ldi	r25, 0x01	; 1
  fe:	e4 d0       	rcall	.+456    	; 0x2c8 <USART_SendString>
	ADCEnable();
 100:	1b d1       	rcall	.+566    	; 0x338 <ADCEnable>
	
	USART_SendString("\tSetting ADC reference to Vcc...\r\n");
 102:	8d e6       	ldi	r24, 0x6D	; 109
 104:	91 e0       	ldi	r25, 0x01	; 1
 106:	e0 d0       	rcall	.+448    	; 0x2c8 <USART_SendString>
	ADCSetReference(ADC_REF_VCC);
 108:	80 e4       	ldi	r24, 0x40	; 64
 10a:	2e d1       	rcall	.+604    	; 0x368 <ADCSetReference>
	
	// Configure IO //
	USART_SendString("\tConfiguring IO...\r\n");
 10c:	80 e9       	ldi	r24, 0x90	; 144
 10e:	91 e0       	ldi	r25, 0x01	; 1
 110:	db d0       	rcall	.+438    	; 0x2c8 <USART_SendString>
	//DDRx corresponds to PORTx/PINx, dependng on direction of data flow -- PORT for output, PIN for input
	DDRA = 0x00;	// Buttons and switches
 112:	11 b8       	out	0x01, r1	; 1
	DDRB = 0xE7;	// Red enable, green enable and audio out
 114:	87 ee       	ldi	r24, 0xE7	; 231
 116:	84 b9       	out	0x04, r24	; 4
	DDRC = 0xff;	// Discrete LEDs
 118:	8f ef       	ldi	r24, 0xFF	; 255
 11a:	87 b9       	out	0x07, r24	; 7
	DDRE = 0x47;	// LED Column
 11c:	87 e4       	ldi	r24, 0x47	; 71
 11e:	8d b9       	out	0x0d, r24	; 13
	DDRF = 0x00;	// Accelerometer
 120:	10 ba       	out	0x10, r1	; 16
	
	// Disable pullups and set outputs low //
	PORTA = 0x00;
 122:	12 b8       	out	0x02, r1	; 2
	PORTB = 0x01;
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	85 b9       	out	0x05, r24	; 5
	PORTC = 0x81;
 128:	81 e8       	ldi	r24, 0x81	; 129
 12a:	88 b9       	out	0x08, r24	; 8
	PORTE = 0x00;
 12c:	1e b8       	out	0x0e, r1	; 14
	PORTF = 0x00;
 12e:	11 ba       	out	0x11, r1	; 17
	
	//Set OC1A to toggle
	TCCR1A = 0b01000000;
 130:	80 e4       	ldi	r24, 0x40	; 64
 132:	80 93 80 00 	sts	0x0080, r24
	// Clk/64 and CTC mode
	TCCR1B = 0b00001011;
 136:	8b e0       	ldi	r24, 0x0B	; 11
 138:	80 93 81 00 	sts	0x0081, r24

	OCR1A = 24;
 13c:	88 e1       	ldi	r24, 0x18	; 24
 13e:	90 e0       	ldi	r25, 0x00	; 0
 140:	90 93 89 00 	sts	0x0089, r25
 144:	80 93 88 00 	sts	0x0088, r24

	USART_SendString("\tSetting SPI\r\n");
 148:	85 ea       	ldi	r24, 0xA5	; 165
 14a:	91 e0       	ldi	r25, 0x01	; 1
 14c:	bd d0       	rcall	.+378    	; 0x2c8 <USART_SendString>
	
	//Set the SPI bus appropriately to use the LED array
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 14e:	81 e5       	ldi	r24, 0x51	; 81
 150:	8c bd       	out	0x2c, r24	; 44

}
 152:	08 95       	ret

00000154 <main>:


int main(int argc, char **argv)
{
 
	initialize();
 154:	bf df       	rcall	.-130    	; 0xd4 <initialize>
	clear_array();
 156:	35 d1       	rcall	.+618    	; 0x3c2 <clear_array>
while (1){
PORTC=PINA;
 158:	80 b1       	in	r24, 0x00	; 0
 15a:	88 b9       	out	0x08, r24	; 8
if (PORTC != 0b00000001){	
 15c:	88 b1       	in	r24, 0x08	; 8
 15e:	81 30       	cpi	r24, 0x01	; 1
 160:	09 f4       	brne	.+2      	; 0x164 <main+0x10>
 162:	33 c0       	rjmp	.+102    	; 0x1ca <main+0x76>
	USART_SendString("green");
 164:	84 eb       	ldi	r24, 0xB4	; 180
 166:	91 e0       	ldi	r25, 0x01	; 1
 168:	af d0       	rcall	.+350    	; 0x2c8 <USART_SendString>
	led_green(0,0);
 16a:	80 e0       	ldi	r24, 0x00	; 0
 16c:	60 e0       	ldi	r22, 0x00	; 0
 16e:	51 d1       	rcall	.+674    	; 0x412 <led_green>
	led_green(0,7);	
 170:	80 e0       	ldi	r24, 0x00	; 0
 172:	67 e0       	ldi	r22, 0x07	; 7
 174:	4e d1       	rcall	.+668    	; 0x412 <led_green>
	led_green(7,0);	
 176:	87 e0       	ldi	r24, 0x07	; 7
 178:	60 e0       	ldi	r22, 0x00	; 0
 17a:	4b d1       	rcall	.+662    	; 0x412 <led_green>
	led_green(7,7);
 17c:	87 e0       	ldi	r24, 0x07	; 7
 17e:	67 e0       	ldi	r22, 0x07	; 7
 180:	48 d1       	rcall	.+656    	; 0x412 <led_green>
	led_green (1,1);
 182:	81 e0       	ldi	r24, 0x01	; 1
 184:	61 e0       	ldi	r22, 0x01	; 1
 186:	45 d1       	rcall	.+650    	; 0x412 <led_green>
	led_green (2,2);
 188:	82 e0       	ldi	r24, 0x02	; 2
 18a:	62 e0       	ldi	r22, 0x02	; 2
 18c:	42 d1       	rcall	.+644    	; 0x412 <led_green>
	led_green (3,3);
 18e:	83 e0       	ldi	r24, 0x03	; 3
 190:	63 e0       	ldi	r22, 0x03	; 3
 192:	3f d1       	rcall	.+638    	; 0x412 <led_green>
	led_green (1,6);
 194:	81 e0       	ldi	r24, 0x01	; 1
 196:	66 e0       	ldi	r22, 0x06	; 6
 198:	3c d1       	rcall	.+632    	; 0x412 <led_green>
	led_green (2,5);
 19a:	82 e0       	ldi	r24, 0x02	; 2
 19c:	65 e0       	ldi	r22, 0x05	; 5
 19e:	39 d1       	rcall	.+626    	; 0x412 <led_green>
	led_green (3,4);
 1a0:	83 e0       	ldi	r24, 0x03	; 3
 1a2:	64 e0       	ldi	r22, 0x04	; 4
 1a4:	36 d1       	rcall	.+620    	; 0x412 <led_green>
	led_green (6,6);
 1a6:	86 e0       	ldi	r24, 0x06	; 6
 1a8:	66 e0       	ldi	r22, 0x06	; 6
 1aa:	33 d1       	rcall	.+614    	; 0x412 <led_green>
	led_green (5,5);
 1ac:	85 e0       	ldi	r24, 0x05	; 5
 1ae:	65 e0       	ldi	r22, 0x05	; 5
 1b0:	30 d1       	rcall	.+608    	; 0x412 <led_green>
	led_green (4,4);
 1b2:	84 e0       	ldi	r24, 0x04	; 4
 1b4:	64 e0       	ldi	r22, 0x04	; 4
 1b6:	2d d1       	rcall	.+602    	; 0x412 <led_green>
	led_green (6,1);
 1b8:	86 e0       	ldi	r24, 0x06	; 6
 1ba:	61 e0       	ldi	r22, 0x01	; 1
 1bc:	2a d1       	rcall	.+596    	; 0x412 <led_green>
	led_green (5,2);
 1be:	85 e0       	ldi	r24, 0x05	; 5
 1c0:	62 e0       	ldi	r22, 0x02	; 2
 1c2:	27 d1       	rcall	.+590    	; 0x412 <led_green>
	led_green (4,3);
 1c4:	84 e0       	ldi	r24, 0x04	; 4
 1c6:	63 e0       	ldi	r22, 0x03	; 3
 1c8:	24 d1       	rcall	.+584    	; 0x412 <led_green>

}

	if (PORTC & 0b00000001){
 1ca:	40 9b       	sbis	0x08, 0	; 8
 1cc:	34 c0       	rjmp	.+104    	; 0x236 <main+0xe2>
USART_SendString ("Red");	
 1ce:	8a eb       	ldi	r24, 0xBA	; 186
 1d0:	91 e0       	ldi	r25, 0x01	; 1
 1d2:	7a d0       	rcall	.+244    	; 0x2c8 <USART_SendString>
	clear_array();	
 1d4:	f6 d0       	rcall	.+492    	; 0x3c2 <clear_array>
	led_red(0,0);
 1d6:	80 e0       	ldi	r24, 0x00	; 0
 1d8:	60 e0       	ldi	r22, 0x00	; 0
 1da:	3c d1       	rcall	.+632    	; 0x454 <led_red>
	led_red(0,7);	
 1dc:	80 e0       	ldi	r24, 0x00	; 0
 1de:	67 e0       	ldi	r22, 0x07	; 7
 1e0:	39 d1       	rcall	.+626    	; 0x454 <led_red>

	led_red(7,0);	
 1e2:	87 e0       	ldi	r24, 0x07	; 7
 1e4:	60 e0       	ldi	r22, 0x00	; 0
 1e6:	36 d1       	rcall	.+620    	; 0x454 <led_red>
	led_red(7,7);
 1e8:	87 e0       	ldi	r24, 0x07	; 7
 1ea:	67 e0       	ldi	r22, 0x07	; 7
 1ec:	33 d1       	rcall	.+614    	; 0x454 <led_red>
	led_red (1,1);
 1ee:	81 e0       	ldi	r24, 0x01	; 1
 1f0:	61 e0       	ldi	r22, 0x01	; 1
 1f2:	30 d1       	rcall	.+608    	; 0x454 <led_red>
	led_red (2,2);
 1f4:	82 e0       	ldi	r24, 0x02	; 2
 1f6:	62 e0       	ldi	r22, 0x02	; 2
 1f8:	2d d1       	rcall	.+602    	; 0x454 <led_red>
	led_red (3,3);
 1fa:	83 e0       	ldi	r24, 0x03	; 3
 1fc:	63 e0       	ldi	r22, 0x03	; 3
 1fe:	2a d1       	rcall	.+596    	; 0x454 <led_red>
	led_red (1,6);
 200:	81 e0       	ldi	r24, 0x01	; 1
 202:	66 e0       	ldi	r22, 0x06	; 6
 204:	27 d1       	rcall	.+590    	; 0x454 <led_red>
	led_red (2,5);
 206:	82 e0       	ldi	r24, 0x02	; 2
 208:	65 e0       	ldi	r22, 0x05	; 5
 20a:	24 d1       	rcall	.+584    	; 0x454 <led_red>
	led_red (3,4);
 20c:	83 e0       	ldi	r24, 0x03	; 3
 20e:	64 e0       	ldi	r22, 0x04	; 4
 210:	21 d1       	rcall	.+578    	; 0x454 <led_red>
	led_red (6,6);
 212:	86 e0       	ldi	r24, 0x06	; 6
 214:	66 e0       	ldi	r22, 0x06	; 6
 216:	1e d1       	rcall	.+572    	; 0x454 <led_red>
	led_red (5,5);
 218:	85 e0       	ldi	r24, 0x05	; 5
 21a:	65 e0       	ldi	r22, 0x05	; 5
 21c:	1b d1       	rcall	.+566    	; 0x454 <led_red>
	led_red (4,4);
 21e:	84 e0       	ldi	r24, 0x04	; 4
 220:	64 e0       	ldi	r22, 0x04	; 4
 222:	18 d1       	rcall	.+560    	; 0x454 <led_red>
	led_red (6,1);
 224:	86 e0       	ldi	r24, 0x06	; 6
 226:	61 e0       	ldi	r22, 0x01	; 1
 228:	15 d1       	rcall	.+554    	; 0x454 <led_red>
	led_red (5,2);
 22a:	85 e0       	ldi	r24, 0x05	; 5
 22c:	62 e0       	ldi	r22, 0x02	; 2
 22e:	12 d1       	rcall	.+548    	; 0x454 <led_red>
	led_red (4,3);
 230:	84 e0       	ldi	r24, 0x04	; 4
 232:	63 e0       	ldi	r22, 0x03	; 3
 234:	0f d1       	rcall	.+542    	; 0x454 <led_red>
	}
	if (PORTC & 0b00100000){
 236:	45 9b       	sbis	0x08, 5	; 8
 238:	8f cf       	rjmp	.-226    	; 0x158 <main+0x4>
	USART_SendString ("blue");	
 23a:	8e eb       	ldi	r24, 0xBE	; 190
 23c:	91 e0       	ldi	r25, 0x01	; 1
 23e:	44 d0       	rcall	.+136    	; 0x2c8 <USART_SendString>
	clear_array(); 
 240:	c0 d0       	rcall	.+384    	; 0x3c2 <clear_array>
       	led_blue(0,0);
 242:	80 e0       	ldi	r24, 0x00	; 0
 244:	60 e0       	ldi	r22, 0x00	; 0
 246:	c5 d0       	rcall	.+394    	; 0x3d2 <led_blue>
       	led_blue(0,7);  
 248:	80 e0       	ldi	r24, 0x00	; 0
 24a:	67 e0       	ldi	r22, 0x07	; 7
 24c:	c2 d0       	rcall	.+388    	; 0x3d2 <led_blue>
	
        	led_blue(7,0);  
 24e:	87 e0       	ldi	r24, 0x07	; 7
 250:	60 e0       	ldi	r22, 0x00	; 0
 252:	bf d0       	rcall	.+382    	; 0x3d2 <led_blue>
        	led_blue(7,7);
 254:	87 e0       	ldi	r24, 0x07	; 7
 256:	67 e0       	ldi	r22, 0x07	; 7
 258:	bc d0       	rcall	.+376    	; 0x3d2 <led_blue>
        	led_blue (1,1);
 25a:	81 e0       	ldi	r24, 0x01	; 1
 25c:	61 e0       	ldi	r22, 0x01	; 1
 25e:	b9 d0       	rcall	.+370    	; 0x3d2 <led_blue>
        	led_blue (2,2);
 260:	82 e0       	ldi	r24, 0x02	; 2
 262:	62 e0       	ldi	r22, 0x02	; 2
 264:	b6 d0       	rcall	.+364    	; 0x3d2 <led_blue>
        	led_blue (3,3);
 266:	83 e0       	ldi	r24, 0x03	; 3
 268:	63 e0       	ldi	r22, 0x03	; 3
 26a:	b3 d0       	rcall	.+358    	; 0x3d2 <led_blue>
        	led_blue (1,6);
 26c:	81 e0       	ldi	r24, 0x01	; 1
 26e:	66 e0       	ldi	r22, 0x06	; 6
 270:	b0 d0       	rcall	.+352    	; 0x3d2 <led_blue>
        	led_blue (2,5);
 272:	82 e0       	ldi	r24, 0x02	; 2
 274:	65 e0       	ldi	r22, 0x05	; 5
 276:	ad d0       	rcall	.+346    	; 0x3d2 <led_blue>
        	led_blue (3,4);
 278:	83 e0       	ldi	r24, 0x03	; 3
 27a:	64 e0       	ldi	r22, 0x04	; 4
 27c:	aa d0       	rcall	.+340    	; 0x3d2 <led_blue>
        	led_blue (6,6);
 27e:	86 e0       	ldi	r24, 0x06	; 6
 280:	66 e0       	ldi	r22, 0x06	; 6
 282:	a7 d0       	rcall	.+334    	; 0x3d2 <led_blue>
        	led_blue (5,5);
 284:	85 e0       	ldi	r24, 0x05	; 5
 286:	65 e0       	ldi	r22, 0x05	; 5
 288:	a4 d0       	rcall	.+328    	; 0x3d2 <led_blue>
        	led_blue (4,4);
 28a:	84 e0       	ldi	r24, 0x04	; 4
 28c:	64 e0       	ldi	r22, 0x04	; 4
 28e:	a1 d0       	rcall	.+322    	; 0x3d2 <led_blue>
        	led_blue (6,1);
 290:	86 e0       	ldi	r24, 0x06	; 6
 292:	61 e0       	ldi	r22, 0x01	; 1
 294:	9e d0       	rcall	.+316    	; 0x3d2 <led_blue>
        	led_blue (5,2);
 296:	85 e0       	ldi	r24, 0x05	; 5
 298:	62 e0       	ldi	r22, 0x02	; 2
 29a:	9b d0       	rcall	.+310    	; 0x3d2 <led_blue>
        	led_blue (4,3);
 29c:	84 e0       	ldi	r24, 0x04	; 4
 29e:	63 e0       	ldi	r22, 0x03	; 3
 2a0:	98 d0       	rcall	.+304    	; 0x3d2 <led_blue>
 2a2:	5a cf       	rjmp	.-332    	; 0x158 <main+0x4>

000002a4 <USART_Init>:
 2a4:	90 93 cd 00 	sts	0x00CD, r25
 2a8:	80 93 cc 00 	sts	0x00CC, r24
 2ac:	88 e1       	ldi	r24, 0x18	; 24
 2ae:	80 93 c9 00 	sts	0x00C9, r24
 2b2:	86 e0       	ldi	r24, 0x06	; 6
 2b4:	80 93 ca 00 	sts	0x00CA, r24
 2b8:	08 95       	ret

000002ba <USART_Transmit>:
 2ba:	90 91 c8 00 	lds	r25, 0x00C8
 2be:	95 ff       	sbrs	r25, 5
 2c0:	fc cf       	rjmp	.-8      	; 0x2ba <USART_Transmit>
 2c2:	80 93 ce 00 	sts	0x00CE, r24
 2c6:	08 95       	ret

000002c8 <USART_SendString>:
 2c8:	ef 92       	push	r14
 2ca:	ff 92       	push	r15
 2cc:	cf 93       	push	r28
 2ce:	df 93       	push	r29
 2d0:	e8 2e       	mov	r14, r24
 2d2:	e7 01       	movw	r28, r14
 2d4:	7e 01       	movw	r14, r28
 2d6:	f9 2e       	mov	r15, r25
 2d8:	e7 01       	movw	r28, r14
 2da:	01 c0       	rjmp	.+2      	; 0x2de <USART_SendString+0x16>
 2dc:	ee df       	rcall	.-36     	; 0x2ba <USART_Transmit>
 2de:	89 91       	ld	r24, Y+
 2e0:	88 23       	and	r24, r24
 2e2:	e1 f7       	brne	.-8      	; 0x2dc <USART_SendString+0x14>
 2e4:	df 91       	pop	r29
 2e6:	cf 91       	pop	r28
 2e8:	ff 90       	pop	r15
 2ea:	ef 90       	pop	r14
 2ec:	08 95       	ret

000002ee <ADCSetPrescaler>:
 2ee:	ea e7       	ldi	r30, 0x7A	; 122
 2f0:	f0 e0       	ldi	r31, 0x00	; 0
 2f2:	90 81       	ld	r25, Z
 2f4:	98 7f       	andi	r25, 0xF8	; 248
 2f6:	90 83       	st	Z, r25
 2f8:	90 81       	ld	r25, Z
 2fa:	87 70       	andi	r24, 0x07	; 7
 2fc:	89 2b       	or	r24, r25
 2fe:	80 83       	st	Z, r24
 300:	08 95       	ret

00000302 <ADCSetFreeRunning>:
 302:	88 23       	and	r24, r24
 304:	99 f0       	breq	.+38     	; 0x32c <ADCSetFreeRunning+0x2a>
 306:	80 91 7b 00 	lds	r24, 0x007B
 30a:	8b 7f       	andi	r24, 0xFB	; 251
 30c:	80 93 7b 00 	sts	0x007B, r24
 310:	80 91 7b 00 	lds	r24, 0x007B
 314:	8d 7f       	andi	r24, 0xFD	; 253
 316:	80 93 7b 00 	sts	0x007B, r24
 31a:	80 91 7b 00 	lds	r24, 0x007B
 31e:	8e 7f       	andi	r24, 0xFE	; 254
 320:	80 93 7b 00 	sts	0x007B, r24
 324:	80 91 7a 00 	lds	r24, 0x007A
 328:	80 62       	ori	r24, 0x20	; 32
 32a:	03 c0       	rjmp	.+6      	; 0x332 <ADCSetFreeRunning+0x30>
 32c:	80 91 7a 00 	lds	r24, 0x007A
 330:	8f 7d       	andi	r24, 0xDF	; 223
 332:	80 93 7a 00 	sts	0x007A, r24
 336:	08 95       	ret

00000338 <ADCEnable>:
 338:	ea e7       	ldi	r30, 0x7A	; 122
 33a:	f0 e0       	ldi	r31, 0x00	; 0
 33c:	80 81       	ld	r24, Z
 33e:	80 68       	ori	r24, 0x80	; 128
 340:	80 83       	st	Z, r24
 342:	08 95       	ret

00000344 <ADCStart>:
 344:	ea e7       	ldi	r30, 0x7A	; 122
 346:	f0 e0       	ldi	r31, 0x00	; 0
 348:	80 81       	ld	r24, Z
 34a:	80 64       	ori	r24, 0x40	; 64
 34c:	80 83       	st	Z, r24
 34e:	08 95       	ret

00000350 <ADCFinish>:
 350:	ea e7       	ldi	r30, 0x7A	; 122
 352:	f0 e0       	ldi	r31, 0x00	; 0
 354:	80 81       	ld	r24, Z
 356:	80 61       	ori	r24, 0x10	; 16
 358:	80 83       	st	Z, r24
 35a:	08 95       	ret

0000035c <ADCDone>:
 35c:	90 91 7a 00 	lds	r25, 0x007A
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	94 ff       	sbrs	r25, 4
 364:	80 e0       	ldi	r24, 0x00	; 0
 366:	08 95       	ret

00000368 <ADCSetReference>:
 368:	90 91 7c 00 	lds	r25, 0x007C
 36c:	9f 73       	andi	r25, 0x3F	; 63
 36e:	90 93 7c 00 	sts	0x007C, r25
 372:	90 91 7c 00 	lds	r25, 0x007C
 376:	80 7c       	andi	r24, 0xC0	; 192
 378:	89 2b       	or	r24, r25
 37a:	80 93 7c 00 	sts	0x007C, r24
 37e:	e2 df       	rcall	.-60     	; 0x344 <ADCStart>
 380:	ed df       	rcall	.-38     	; 0x35c <ADCDone>
 382:	88 23       	and	r24, r24
 384:	e9 f3       	breq	.-6      	; 0x380 <ADCSetReference+0x18>
 386:	e4 cf       	rjmp	.-56     	; 0x350 <ADCFinish>

00000388 <SetupADC>:
 388:	df 93       	push	r29
 38a:	cf 93       	push	r28
 38c:	0f 92       	push	r0
 38e:	cd b7       	in	r28, 0x3d	; 61
 390:	de b7       	in	r29, 0x3e	; 62
 392:	69 83       	std	Y+1, r22	; 0x01
 394:	ac df       	rcall	.-168    	; 0x2ee <ADCSetPrescaler>
 396:	69 81       	ldd	r22, Y+1	; 0x01
 398:	86 2f       	mov	r24, r22
 39a:	b3 df       	rcall	.-154    	; 0x302 <ADCSetFreeRunning>
 39c:	0f 90       	pop	r0
 39e:	cf 91       	pop	r28
 3a0:	df 91       	pop	r29
 3a2:	08 95       	ret

000003a4 <update_row>:
 3a4:	8e bd       	out	0x2e, r24	; 46
 3a6:	0d b4       	in	r0, 0x2d	; 45
 3a8:	07 fe       	sbrs	r0, 7
 3aa:	fd cf       	rjmp	.-6      	; 0x3a6 <update_row+0x2>
 3ac:	6e bd       	out	0x2e, r22	; 46
 3ae:	0d b4       	in	r0, 0x2d	; 45
 3b0:	07 fe       	sbrs	r0, 7
 3b2:	fd cf       	rjmp	.-6      	; 0x3ae <update_row+0xa>
 3b4:	4e bd       	out	0x2e, r20	; 46
 3b6:	0d b4       	in	r0, 0x2d	; 45
 3b8:	07 fe       	sbrs	r0, 7
 3ba:	fd cf       	rjmp	.-6      	; 0x3b6 <update_row+0x12>
 3bc:	2f 9a       	sbi	0x05, 7	; 5
 3be:	2f 98       	cbi	0x05, 7	; 5
 3c0:	08 95       	ret

000003c2 <clear_array>:
 3c2:	80 e0       	ldi	r24, 0x00	; 0
 3c4:	60 e0       	ldi	r22, 0x00	; 0
 3c6:	40 e0       	ldi	r20, 0x00	; 0
 3c8:	ed cf       	rjmp	.-38     	; 0x3a4 <update_row>

000003ca <led_off>:
 3ca:	80 e0       	ldi	r24, 0x00	; 0
 3cc:	60 e0       	ldi	r22, 0x00	; 0
 3ce:	40 e0       	ldi	r20, 0x00	; 0
 3d0:	e9 cf       	rjmp	.-46     	; 0x3a4 <update_row>

000003d2 <led_blue>:
 3d2:	1f 93       	push	r17
 3d4:	df 93       	push	r29
 3d6:	cf 93       	push	r28
 3d8:	0f 92       	push	r0
 3da:	cd b7       	in	r28, 0x3d	; 61
 3dc:	de b7       	in	r29, 0x3e	; 62
 3de:	9e b1       	in	r25, 0x0e	; 14
 3e0:	18 2f       	mov	r17, r24
 3e2:	10 95       	com	r17
 3e4:	17 70       	andi	r17, 0x07	; 7
 3e6:	98 7f       	andi	r25, 0xF8	; 248
 3e8:	19 2b       	or	r17, r25
 3ea:	69 83       	std	Y+1, r22	; 0x01
 3ec:	ee df       	rcall	.-36     	; 0x3ca <led_off>
 3ee:	1e b9       	out	0x0e, r17	; 14
 3f0:	69 81       	ldd	r22, Y+1	; 0x01
 3f2:	67 70       	andi	r22, 0x07	; 7
 3f4:	40 e8       	ldi	r20, 0x80	; 128
 3f6:	50 e0       	ldi	r21, 0x00	; 0
 3f8:	02 c0       	rjmp	.+4      	; 0x3fe <led_blue+0x2c>
 3fa:	55 95       	asr	r21
 3fc:	47 95       	ror	r20
 3fe:	6a 95       	dec	r22
 400:	e2 f7       	brpl	.-8      	; 0x3fa <led_blue+0x28>
 402:	80 e0       	ldi	r24, 0x00	; 0
 404:	60 e0       	ldi	r22, 0x00	; 0
 406:	ce df       	rcall	.-100    	; 0x3a4 <update_row>
 408:	0f 90       	pop	r0
 40a:	cf 91       	pop	r28
 40c:	df 91       	pop	r29
 40e:	1f 91       	pop	r17
 410:	08 95       	ret

00000412 <led_green>:
 412:	1f 93       	push	r17
 414:	df 93       	push	r29
 416:	cf 93       	push	r28
 418:	0f 92       	push	r0
 41a:	cd b7       	in	r28, 0x3d	; 61
 41c:	de b7       	in	r29, 0x3e	; 62
 41e:	9e b1       	in	r25, 0x0e	; 14
 420:	18 2f       	mov	r17, r24
 422:	10 95       	com	r17
 424:	17 70       	andi	r17, 0x07	; 7
 426:	98 7f       	andi	r25, 0xF8	; 248
 428:	19 2b       	or	r17, r25
 42a:	69 83       	std	Y+1, r22	; 0x01
 42c:	ce df       	rcall	.-100    	; 0x3ca <led_off>
 42e:	1e b9       	out	0x0e, r17	; 14
 430:	69 81       	ldd	r22, Y+1	; 0x01
 432:	86 2f       	mov	r24, r22
 434:	87 70       	andi	r24, 0x07	; 7
 436:	60 e8       	ldi	r22, 0x80	; 128
 438:	70 e0       	ldi	r23, 0x00	; 0
 43a:	02 c0       	rjmp	.+4      	; 0x440 <led_green+0x2e>
 43c:	75 95       	asr	r23
 43e:	67 95       	ror	r22
 440:	8a 95       	dec	r24
 442:	e2 f7       	brpl	.-8      	; 0x43c <led_green+0x2a>
 444:	80 e0       	ldi	r24, 0x00	; 0
 446:	40 e0       	ldi	r20, 0x00	; 0
 448:	ad df       	rcall	.-166    	; 0x3a4 <update_row>
 44a:	0f 90       	pop	r0
 44c:	cf 91       	pop	r28
 44e:	df 91       	pop	r29
 450:	1f 91       	pop	r17
 452:	08 95       	ret

00000454 <led_red>:
 454:	1f 93       	push	r17
 456:	df 93       	push	r29
 458:	cf 93       	push	r28
 45a:	0f 92       	push	r0
 45c:	cd b7       	in	r28, 0x3d	; 61
 45e:	de b7       	in	r29, 0x3e	; 62
 460:	9e b1       	in	r25, 0x0e	; 14
 462:	18 2f       	mov	r17, r24
 464:	10 95       	com	r17
 466:	17 70       	andi	r17, 0x07	; 7
 468:	98 7f       	andi	r25, 0xF8	; 248
 46a:	19 2b       	or	r17, r25
 46c:	69 83       	std	Y+1, r22	; 0x01
 46e:	ad df       	rcall	.-166    	; 0x3ca <led_off>
 470:	1e b9       	out	0x0e, r17	; 14
 472:	69 81       	ldd	r22, Y+1	; 0x01
 474:	67 70       	andi	r22, 0x07	; 7
 476:	80 e8       	ldi	r24, 0x80	; 128
 478:	90 e0       	ldi	r25, 0x00	; 0
 47a:	02 c0       	rjmp	.+4      	; 0x480 <led_red+0x2c>
 47c:	95 95       	asr	r25
 47e:	87 95       	ror	r24
 480:	6a 95       	dec	r22
 482:	e2 f7       	brpl	.-8      	; 0x47c <led_red+0x28>
 484:	60 e0       	ldi	r22, 0x00	; 0
 486:	40 e0       	ldi	r20, 0x00	; 0
 488:	8d df       	rcall	.-230    	; 0x3a4 <update_row>
 48a:	0f 90       	pop	r0
 48c:	cf 91       	pop	r28
 48e:	df 91       	pop	r29
 490:	1f 91       	pop	r17
 492:	08 95       	ret

00000494 <_exit>:
 494:	f8 94       	cli

00000496 <__stop_program>:
 496:	ff cf       	rjmp	.-2      	; 0x496 <__stop_program>
